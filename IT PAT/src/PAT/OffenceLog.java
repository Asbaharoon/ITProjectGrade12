package PAT;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.io.FileReader;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.*;
import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.border.Border;
import javax.swing.BorderFactory;
import javax.swing.table.*;

/**
 *
 * @author eliznab74
 */
public class OffenceLog extends javax.swing.JFrame {

    /**
     * Creates new form OffenceLog
     */
    private Connection con = null;
    private PreparedStatement pst = null;
    private PreparedStatement ps = null;
    private int level;
    
    public OffenceLog()
    {
        initComponents();
        Toolkit toolkit = getToolkit();
        //code to make form appear in center of device screen
        Dimension size = toolkit.getScreenSize();
        setLocation(size.width/2-getWidth()/2, size.height/2-getHeight()/2);
        check();
        Default();
        setColours();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        lblHelp = new javax.swing.JLabel();
        lblOffenceID = new javax.swing.JLabel();
        lblDescription = new javax.swing.JLabel();
        lblLevel = new javax.swing.JLabel();
        txtOffenceID = new javax.swing.JTextField();
        txtDescription = new javax.swing.JTextField();
        btnRegister = new javax.swing.JButton();
        lblOIDerr = new javax.swing.JLabel();
        lblDSerr = new javax.swing.JLabel();
        lblLVerr = new javax.swing.JLabel();
        cb1 = new javax.swing.JCheckBox();
        cb2 = new javax.swing.JCheckBox();
        cb3 = new javax.swing.JCheckBox();
        cb4 = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTDisplay = new javax.swing.JTable();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnReturn = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jmSort = new javax.swing.JMenu();
        js6 = new javax.swing.JPopupMenu.Separator();
        jmASC = new javax.swing.JMenu();
        js9 = new javax.swing.JPopupMenu.Separator();
        jmiASC_LV = new javax.swing.JMenuItem();
        js10 = new javax.swing.JPopupMenu.Separator();
        jmiASC_OID = new javax.swing.JMenuItem();
        js11 = new javax.swing.JPopupMenu.Separator();
        js7 = new javax.swing.JPopupMenu.Separator();
        jmDESC = new javax.swing.JMenu();
        js12 = new javax.swing.JPopupMenu.Separator();
        jmiDESC_LV = new javax.swing.JMenuItem();
        js13 = new javax.swing.JPopupMenu.Separator();
        jmiDESC_OID = new javax.swing.JMenuItem();
        js14 = new javax.swing.JPopupMenu.Separator();
        js8 = new javax.swing.JPopupMenu.Separator();
        jmFilter = new javax.swing.JMenu();
        js1 = new javax.swing.JPopupMenu.Separator();
        jmiL1 = new javax.swing.JMenuItem();
        js2 = new javax.swing.JPopupMenu.Separator();
        jmiL2 = new javax.swing.JMenuItem();
        js3 = new javax.swing.JPopupMenu.Separator();
        lmiL3 = new javax.swing.JMenuItem();
        js4 = new javax.swing.JPopupMenu.Separator();
        jmiL4 = new javax.swing.JMenuItem();
        js5 = new javax.swing.JPopupMenu.Separator();
        jmRestore = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Offence Log");

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setForeground(new java.awt.Color(0, 0, 0));
        jPanel1.setToolTipText("");

        jPanel2.setBackground(new java.awt.Color(0, 0, 102));

        lblTitle.setBackground(new java.awt.Color(0, 0, 102));
        lblTitle.setFont(new java.awt.Font("Agency FB", 0, 36)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(255, 255, 255));
        lblTitle.setText("Offence Log");

        lblHelp.setForeground(new java.awt.Color(255, 255, 255));
        lblHelp.setText("Help");
        lblHelp.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblHelp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblHelpMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 293, Short.MAX_VALUE)
                .addComponent(lblHelp)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblHelp))
                .addContainerGap())
        );

        lblOffenceID.setForeground(new java.awt.Color(255, 255, 255));
        lblOffenceID.setText("Offence ID");

        lblDescription.setForeground(new java.awt.Color(255, 255, 255));
        lblDescription.setText("Description");

        lblLevel.setForeground(new java.awt.Color(255, 255, 255));
        lblLevel.setText("Level");

        txtOffenceID.setBackground(new java.awt.Color(0, 0, 0));
        txtOffenceID.setForeground(new java.awt.Color(0, 0, 153));
        txtOffenceID.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 3, 1, new java.awt.Color(0, 0, 102)));
        txtOffenceID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtOffenceIDActionPerformed(evt);
            }
        });
        txtOffenceID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtOffenceIDKeyTyped(evt);
            }
        });

        txtDescription.setBackground(new java.awt.Color(0, 0, 0));
        txtDescription.setForeground(new java.awt.Color(0, 0, 153));
        txtDescription.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 3, 1, new java.awt.Color(0, 0, 102)));
        txtDescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDescriptionActionPerformed(evt);
            }
        });

        btnRegister.setBackground(new java.awt.Color(0, 0, 0));
        btnRegister.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnRegister.setForeground(new java.awt.Color(255, 255, 255));
        btnRegister.setText("Register");
        btnRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterActionPerformed(evt);
            }
        });

        lblOIDerr.setForeground(new java.awt.Color(156, 0, 0));

        lblDSerr.setForeground(new java.awt.Color(156, 0, 0));

        lblLVerr.setForeground(new java.awt.Color(156, 0, 0));

        cb1.setBackground(new java.awt.Color(0, 0, 0));
        cb1.setForeground(new java.awt.Color(0, 0, 153));
        cb1.setText("1");
        cb1.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 102)));
        cb1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb1ActionPerformed(evt);
            }
        });

        cb2.setBackground(new java.awt.Color(0, 0, 0));
        cb2.setForeground(new java.awt.Color(0, 0, 153));
        cb2.setText("2");
        cb2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb2ActionPerformed(evt);
            }
        });

        cb3.setBackground(new java.awt.Color(0, 0, 0));
        cb3.setForeground(new java.awt.Color(0, 0, 153));
        cb3.setText("3");

        cb4.setBackground(new java.awt.Color(0, 0, 0));
        cb4.setForeground(new java.awt.Color(0, 0, 153));
        cb4.setText("4");

        jTDisplay.setBackground(new java.awt.Color(0, 0, 0));
        jTDisplay.setBorder(new javax.swing.border.MatteBorder(null));
        jTDisplay.setForeground(new java.awt.Color(255, 255, 255));
        jTDisplay.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Offence ID", "Description", "Level"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTDisplay.setGridColor(new java.awt.Color(0, 0, 153));
        jTDisplay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTDisplayMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTDisplay);

        btnUpdate.setBackground(new java.awt.Color(0, 0, 0));
        btnUpdate.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(0, 0, 0));
        btnDelete.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnReturn.setBackground(new java.awt.Color(0, 0, 0));
        btnReturn.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnReturn.setForeground(new java.awt.Color(255, 255, 255));
        btnReturn.setText("Return");
        btnReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnActionPerformed(evt);
            }
        });

        btnClear.setBackground(new java.awt.Color(0, 0, 0));
        btnClear.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnClear.setForeground(new java.awt.Color(255, 255, 255));
        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblOffenceID, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(46, 46, 46)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(cb1)
                                .addGap(18, 18, 18)
                                .addComponent(cb2)
                                .addGap(18, 18, 18)
                                .addComponent(cb3)
                                .addGap(18, 18, 18)
                                .addComponent(cb4))
                            .addComponent(lblLVerr)
                            .addComponent(lblDSerr)
                            .addComponent(lblOIDerr)
                            .addComponent(txtDescription, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                            .addComponent(txtOffenceID)))
                    .addComponent(btnReturn))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 39, Short.MAX_VALUE)
                        .addComponent(btnClear)
                        .addGap(18, 18, 18)
                        .addComponent(btnRegister)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdate))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnUpdate)
                            .addComponent(btnDelete)
                            .addComponent(btnRegister)
                            .addComponent(btnClear)
                            .addComponent(btnReturn)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblOffenceID)
                            .addComponent(txtOffenceID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblOIDerr)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblDescription)
                            .addComponent(txtDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblDSerr)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblLevel)
                            .addComponent(cb1)
                            .addComponent(cb2)
                            .addComponent(cb3)
                            .addComponent(cb4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblLVerr)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jMenuBar1.setBackground(new java.awt.Color(0, 0, 0));
        jMenuBar1.setForeground(new java.awt.Color(0, 0, 0));

        jmSort.setBackground(new java.awt.Color(0, 0, 102));
        jmSort.setForeground(new java.awt.Color(0, 0, 0));
        jmSort.setText("Sort");
        jmSort.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jmSort.add(js6);

        jmASC.setText("Ascending Order");
        jmASC.add(js9);

        jmiASC_LV.setText("Level");
        jmiASC_LV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiASC_LVActionPerformed(evt);
            }
        });
        jmASC.add(jmiASC_LV);
        jmASC.add(js10);

        jmiASC_OID.setText("Offence ID");
        jmiASC_OID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiASC_OIDActionPerformed(evt);
            }
        });
        jmASC.add(jmiASC_OID);
        jmASC.add(js11);

        jmSort.add(jmASC);
        jmSort.add(js7);

        jmDESC.setText("Descending Order");
        jmDESC.add(js12);

        jmiDESC_LV.setText("Level");
        jmiDESC_LV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiDESC_LVActionPerformed(evt);
            }
        });
        jmDESC.add(jmiDESC_LV);
        jmDESC.add(js13);

        jmiDESC_OID.setText("Offence ID");
        jmiDESC_OID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiDESC_OIDActionPerformed(evt);
            }
        });
        jmDESC.add(jmiDESC_OID);
        jmDESC.add(js14);

        jmSort.add(jmDESC);
        jmSort.add(js8);

        jMenuBar1.add(jmSort);

        jmFilter.setBackground(new java.awt.Color(0, 0, 102));
        jmFilter.setForeground(new java.awt.Color(0, 0, 0));
        jmFilter.setText("Filter");
        jmFilter.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jmFilter.add(js1);

        jmiL1.setText("Level 1");
        jmiL1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiL1ActionPerformed(evt);
            }
        });
        jmFilter.add(jmiL1);
        jmFilter.add(js2);

        jmiL2.setText("Level 2");
        jmiL2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiL2ActionPerformed(evt);
            }
        });
        jmFilter.add(jmiL2);
        jmFilter.add(js3);

        lmiL3.setText("Level 3");
        lmiL3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lmiL3ActionPerformed(evt);
            }
        });
        jmFilter.add(lmiL3);
        jmFilter.add(js4);

        jmiL4.setText("Level 4");
        jmiL4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiL4ActionPerformed(evt);
            }
        });
        jmFilter.add(jmiL4);
        jmFilter.add(js5);

        jMenuBar1.add(jmFilter);

        jmRestore.setBackground(new java.awt.Color(0, 0, 102));
        jmRestore.setForeground(new java.awt.Color(0, 0, 0));
        jmRestore.setText("Restore");
        jmRestore.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jmRestore.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jmRestoreMouseClicked(evt);
            }
        });
        jMenuBar1.add(jmRestore);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void setColours()
    {
        Color bl = new Color(0, 0, 153);
        
        jTDisplay.setBackground(Color.black);
        jTDisplay.setForeground(bl);
        jTDisplay.getTableHeader().setForeground(bl);
        jTDisplay.getTableHeader().setBackground(Color.BLACK);
        jTDisplay.getTableHeader().setFont(new Font("Dialog", Font.BOLD, 12));
    }
    
    private void Default()
    {
        ArrayList<Offence> userList = new ArrayList<>();
        try
        {
            con = DriverManager.getConnection("jdbc:mysql://localhost/consultations", "root", "");
            String query = "SELECT* FROM offences";
            ResultSet rs = (con.createStatement()).executeQuery(query);
            Offence user;
            
            while(rs.next())
            {
                user = new Offence(rs.getString("OffenceID"), rs.getString("Description"), rs.getInt("Level"));
                userList.add(user);
            }
        }
        catch(SQLException ex)
        {
            JOptionPane.showMessageDialog(null, ex);
        }
        
        ArrayList<Offence> List = userList;
        DefaultTableModel model = (DefaultTableModel)jTDisplay.getModel();
        Object[] row = new Object[6];
        
        for(int i = 0; i < List.size(); i++)
        {
            row[0] = List.get(i).getOffenceID();
            row[1] = List.get(i).getDescription();
            row[2] = String.valueOf(List.get(i).getLevel());
            model.addRow(row);
        }
    }
    
    //method used for sorting
    private void Sort(String order /*Either ASC or DESC*/, String value /*what user wants to sort by*/)
    {
        //clear jtable 
        jTDisplay.setModel(new DefaultTableModel(null, new String[]{"Offence ID", "Description", "Level"}));
        ArrayList<Offence> userList = new ArrayList<>();
        //use conditions to obtain data from database and place in array list
        try
        {
            con = DriverManager.getConnection("jdbc:mysql://localhost/consultations", "root", "");
            String query = "SELECT * FROM offences ORDER BY " + value + " " + order;
            ResultSet rs = (con.createStatement()).executeQuery(query);
            Offence user;
            
            while(rs.next())
            {
                user = new Offence(rs.getString("OffenceID"), rs.getString("Description"), rs.getInt("Level"));
                userList.add(user);
            }
        }
        catch(SQLException ex)
        {
            JOptionPane.showMessageDialog(null, ex);
        }
        
        //display data from array list on jtable
        ArrayList<Offence> List = userList;
        DefaultTableModel model = (DefaultTableModel)jTDisplay.getModel();
        Object[] row = new Object[6];
        
        for(int i = 0; i < List.size(); i++)
        {
            row[0] = List.get(i).getOffenceID();
            row[1] = List.get(i).getDescription();
            row[2] = String.valueOf(List.get(i).getLevel());
            model.addRow(row);
        }
    }
    
    //method used for filtering data
    private void Filter(String filter /*what you want to filter*/, String value/*filter condition*/)
    {
        //clear data in jTable
        jTDisplay.setModel(new DefaultTableModel(null, new String[]{"Offence ID", "Description", "Level"}));
        ArrayList<Offence> userList = new ArrayList<>();
        //get data from database and store in array list
        try
        {
            con = DriverManager.getConnection("jdbc:mysql://localhost/consultations", "root", "");
            String query = "SELECT * FROM offences WHERE " + filter + " = '" + value + "'" ;
            
            ResultSet rs = (con.createStatement()).executeQuery(query);
            Offence user;
            
            while(rs.next())
            {
                user = new Offence(rs.getString("OffenceID"), rs.getString("Description"), rs.getInt("Level"));
                userList.add(user);
            }
        }
        catch(SQLException ex)
        {
            JOptionPane.showMessageDialog(null, ex);
        }
        
        //display data in array list on jTable
        ArrayList<Offence> List = userList;
        DefaultTableModel model = (DefaultTableModel)jTDisplay.getModel();
        Object[] row = new Object[6];
        
        for(int i = 0; i < List.size(); i++)
        {
            row[0] = List.get(i).getOffenceID();
            row[1] = List.get(i).getDescription();
            row[2] = String.valueOf(List.get(i).getLevel());
            model.addRow(row);
        }
    }
    
    private void changeColor(String s, Color g, Border bb)
    {
        lblOIDerr.setText(s);
        lblDSerr.setText(s);
        lblLVerr.setText(s);
        
        lblOIDerr.setForeground(g);
        lblDSerr.setForeground(g);
        lblLVerr.setForeground(g);
        
        txtOffenceID.setForeground(g);
        txtDescription.setForeground(g);
        
        txtOffenceID.setBorder(bb);
        txtDescription.setBorder(bb);
        
        cb1.setForeground(g);
        cb2.setForeground(g);
        cb3.setForeground(g);
        cb4.setForeground(g);
        
        txtOffenceID.requestFocus();
    }
    
    private void clear(String s, Color g, Border bb)
    {
        txtOffenceID.setText(s);
        txtDescription.setText(s);
        
        cb1.setSelected(false);
        cb2.setSelected(false);
        cb3.setSelected(false);
        cb4.setSelected(false);
        
        changeColor(s, g, bb);
    }
    
    private void check()
    {
        try
        {
            try(Scanner sc = new Scanner(new FileReader("temp.txt")))
            {
                String line = sc.nextLine();
                try(Scanner ar = new Scanner(line).useDelimiter("#"))
                {
                    String un = ar.next();
                    String pass = ar.next();
                    String pos = ar.next();
                    
                    Login log = new Login(un, pass, pos);
                    if(log.getPosition().equals("Prefect") || log.getPosition().equals("Head Prefect"))
                    {
                        btnRegister.setEnabled(false);
                        btnDelete.setEnabled(false);
                        btnUpdate.setEnabled(false);
                        btnClear.setEnabled(false);
                    }
                }
            }
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, ex, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void val()
    {
        Color r = new Color(156, 0, 0);
        Color g = new Color(15, 166, 7);

        Border a = BorderFactory.createMatteBorder(1, 1, 3, 1, g);
        Border b = BorderFactory.createMatteBorder(1, 1, 3, 1, r);
        
        try
        {
            //Offence ID Checks
            //Presence Check
            //if offence id field is empty
            if(txtOffenceID.getText().isEmpty())
            {
                //display error message
                lblOIDerr.setText("Offence ID must be entered*");
                lblOIDerr.setForeground(r);
                txtOffenceID.setBorder(b);
                txtOffenceID.setForeground(r);
            }
            //if field is not empty
            else
            {
                //analyse each letter of input
                for(int i = 0; i < txtOffenceID.getText().length(); i++)
                {
                    //Type and Logical check. Only letters and numbers should be used
                    //if character is letter or number
                    if(Character.isLetter(txtOffenceID.getText().charAt(i)) || Character.isDigit(txtOffenceID.getText().charAt(i)))
                    {
                        //Length check
                        //if input greater than 7 characters
                        if(txtOffenceID.getText().length() > 7)
                        {
                            //display message indicating error
                            lblOIDerr.setText("Ensure input has less than 7 characters*");
                            lblOIDerr.setForeground(r);
                            txtOffenceID.setBorder(b);
                            txtOffenceID.setForeground(r);
                        }
                        //if input less than 3 characters
                        else if(txtOffenceID.getText().length() < 3)
                        {
                            //display message indicating error
                            lblOIDerr.setText("Ensure input has more than 2 characters*");
                            lblOIDerr.setForeground(r);
                            txtOffenceID.setBorder(b);
                            txtOffenceID.setForeground(r);
                        }
                        //if no errors present
                        else
                        {
                            //display message indicating success
                            lblOIDerr.setText("****");
                            lblOIDerr.setForeground(g);
                            txtOffenceID.setBorder(a);
                            txtOffenceID.setForeground(g);
                        }
                    }
                    //if input does not consist of letters and numbers
                    else
                    {
                        lblOIDerr.setText("Enter only letters and/or numbers*");
                        lblOIDerr.setForeground(r);
                        txtOffenceID.setBorder(b);
                        txtOffenceID.setForeground(r);
                    }
                }
            }

            //Description Validation Checks
            //Presence Check
            //If field is empty
            if(txtDescription.getText().isEmpty())
            {
                //error message displayed in first name field is empty
                lblDSerr.setText("Description must be entered*");
                //set labels and fields to red indicating error
                lblDSerr.setForeground(r);
                txtDescription.setBorder(b);
                txtDescription.setForeground(r);
            }
            else
            {
                //Ensures that first letter is a capital
                //if first letter is not capital letter
                if(!Character.isUpperCase(txtDescription.getText().charAt(0)))
                {
                    //error message displayed if first letter is not a capital letter
                    lblDSerr.setText("First letter must be capitalized*");
                    //set label and field to red indicating error
                    lblDSerr.setForeground(r);
                    txtDescription.setBorder(b);
                    txtDescription.setForeground(r);
                }
                //if first letter is in uppercase
                else
                {
                    //analyse each character to check if it is a letter
                    for(int i = 0; i < txtDescription.getText().length(); i++)
                    {
                        //Type and Logical check. Only letters should be used
                        //if letter at certain position is letter
                        if(Character.isLetter(txtDescription.getText().charAt(i)))
                        {
                            //Length check
                            //if input gerater than 1000 characters
                            if(txtDescription.getText().length() > 1000)
                            {
                                //error message to be displayed if first name greater than 50 characters
                                lblDSerr.setText("Ensure input has less than 1000 characters*");
                                //set label and field to red indicating error
                                lblDSerr.setForeground(r);
                                txtDescription.setBorder(b);
                                txtDescription.setForeground(r);
                            }
                            //if input less than 10 characters
                            else if(txtDescription.getText().length() < 10)
                            {
                                //error message to be displayed if first name less than 10 characters
                                lblDSerr.setText("Ensure input has more than 10 characters*");
                                //set label and field to red indicating error
                                lblDSerr.setForeground(r);
                                txtDescription.setBorder(b);
                                txtDescription.setForeground(r);
                            }
                            //if there are no errors
                            else
                            {
                                //Display stars indicating correct input
                                lblDSerr.setText("****");
                                //set label and field to indicate correct input
                                lblDSerr.setForeground(g);
                                txtDescription.setBorder(a);
                                txtDescription.setForeground(g);
                            }
                        }
                        //if charactr other than letters are found
                        else
                        {
                            //error message displayed if there are characters other than letters in input
                            lblDSerr.setText("Enter only letters*");
                            //set label and field to red indicating error
                            lblDSerr.setForeground(r);
                            txtDescription.setBorder(b);
                            txtDescription.setForeground(r);
                        }
                    }
                }
            }

            //Level Validation Checks
            //Presence Check
            //if neither of the check boxes have been selected
            if(!cb1.isSelected() && !cb2.isSelected() && !cb3.isSelected())
            {
                //error message to be displayed if both check boxes have not been selected
                lblLVerr.setText("Level must be selected*");
                //set label and fields to red to indicate error
                lblLVerr.setForeground(r);
                cb1.setForeground(r);
                cb2.setForeground(r);
                cb3.setForeground(r);
                cb4.setForeground(r);
            }
            //if more than one of the check boxes have been selected
            else if((cb1.isSelected() && cb2.isSelected()) || (cb1.isSelected() && cb3.isSelected()) || (cb1.isSelected() && cb4.isSelected()) ||(cb2.isSelected() && cb3.isSelected()) || (cb2.isSelected() && cb4.isSelected()) || (cb3.isSelected() && cb4.isSelected()) || (cb1.isSelected() && cb2.isSelected() && cb3.isSelected()) || (cb1.isSelected() && cb2.isSelected() && cb4.isSelected()) || (cb1.isSelected() && cb3.isSelected() && cb4.isSelected()) || (cb2.isSelected() && cb3.isSelected() && cb4.isSelected()) || (cb1.isSelected() && cb2.isSelected() && cb3.isSelected() && cb4.isSelected()))
            {
                //error messgae to be displayed if both check boxes have been selected
                lblLVerr.setText("You may only select one option*");
                //set label and fields to red to indicate error
                lblLVerr.setForeground(r);
                cb1.setForeground(r);
                cb2.setForeground(r);
                cb3.setForeground(r);
                cb4.setForeground(r);
            }
            //if only one of the two has been selected
            else
            {
                //display stars to indicate correct input
                lblLVerr.setText("****");
                //set label and fields to green to indicate correct input
                lblLVerr.setForeground(g);
                cb1.setForeground(g);
                cb2.setForeground(g);
                cb3.setForeground(g);
                cb4.setForeground(g);
            }
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, ex, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void lblHelpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblHelpMouseClicked
        // TODO add your handling code here:
        //display help screen
        Help h = new Help();
        h.setVisible(true);
    }//GEN-LAST:event_lblHelpMouseClicked

    private void txtOffenceIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtOffenceIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOffenceIDActionPerformed

    private void txtOffenceIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtOffenceIDKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOffenceIDKeyTyped

    private void txtDescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDescriptionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDescriptionActionPerformed

    private void btnRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterActionPerformed

        Color r = new Color(156, 0, 0);
        Color g = new Color(15, 166, 7);
        Color bl = new Color(0, 0, 153);

        Border a = BorderFactory.createMatteBorder(1, 1, 3, 1, g);
        Border b = BorderFactory.createMatteBorder(1, 1, 3, 1, r);
        Border c = BorderFactory.createMatteBorder(1, 1, 3, 1, bl);

        int opt = JOptionPane.showConfirmDialog(null, "You are about to Insert a new record. Are you sure of this action?", "Insert", JOptionPane.YES_NO_OPTION);
        if(opt == 0)
        {
            //Offence ID Checks
            //Presence Check
            //if offence id field is empty
            if(txtOffenceID.getText().isEmpty())
            {
                //display error message
                lblOIDerr.setText("Offence ID must be entered*");
                lblOIDerr.setForeground(r);
                txtOffenceID.setBorder(b);
                txtOffenceID.setForeground(r);
            }
            //if field is not empty
            else
            {
                //analyse each letter of input
                for(int i = 0; i < txtOffenceID.getText().length(); i++)
                {
                    //Type and Logical check. Only letters and numbers should be used
                    //if character is letter or number
                    if(Character.isLetter(txtOffenceID.getText().charAt(i)) || Character.isDigit(txtOffenceID.getText().charAt(i)))
                    {
                        //Length check
                        //if input greater than 7 characters
                        if(txtOffenceID.getText().length() > 7)
                        {
                            //display message indicating error
                            lblOIDerr.setText("Ensure input has less than 7 characters*");
                            lblOIDerr.setForeground(r);
                            txtOffenceID.setBorder(b);
                            txtOffenceID.setForeground(r);
                        }
                        //if input less than 3 characters
                        else if(txtOffenceID.getText().length() < 3)
                        {
                            //display message indicating error
                            lblOIDerr.setText("Ensure input has more than 2 characters*");
                            lblOIDerr.setForeground(r);
                            txtOffenceID.setBorder(b);
                            txtOffenceID.setForeground(r);
                        }
                        //if no errors present
                        else
                        {
                            //display message indicating success
                            lblOIDerr.setText("****");
                            lblOIDerr.setForeground(g);
                            txtOffenceID.setBorder(a);
                            txtOffenceID.setForeground(g);
                        }
                    }
                    //if input does not consist of letters and numbers
                    else
                    {
                        lblOIDerr.setText("Enter only letters and/or numbers*");
                        lblOIDerr.setForeground(r);
                        txtOffenceID.setBorder(b);
                        txtOffenceID.setForeground(r);
                    }
                }
                
                //begin try-catch
                try
                {
                    String query = "SELECT * FROM offences WHERE `OffenceID` = '" + txtOffenceID.getText() + "';";
                    //get connection to database
                    con = DriverManager.getConnection("jdbc:mysql://localhost/consultations", "root", "");
                    pst = con.prepareStatement(query);

                    ResultSet rs = pst.executeQuery(query);
                    //if offence ID found
                    if(rs.next())
                    {
                        //display message indicating error
                        lblOIDerr.setText("Offence ID already exists*");
                        lblOIDerr.setForeground(r);
                        txtOffenceID.setBorder(b);
                        txtOffenceID.setForeground(r);
                    }
                    //if not found
                    else
                    {
                        //display message indicating correct input
                        lblOIDerr.setText("****");
                        lblOIDerr.setForeground(g);
                        txtOffenceID.setBorder(a);
                        txtOffenceID.setForeground(g);
                    }
                }
                catch(SQLException ex)
                {
                    JOptionPane.showMessageDialog(null, ex, "Error", JOptionPane.ERROR_MESSAGE);
                }
                //end of try-catch
            }

            //Description Validation Checks
            //Presence Check
            //If field is empty
            if(txtDescription.getText().isEmpty())
            {
                //error message displayed in first name field is empty
                lblDSerr.setText("Description must be entered*");
                //set labels and fields to red indicating error
                lblDSerr.setForeground(r);
                txtDescription.setBorder(b);
                txtDescription.setForeground(r);
            }
            else
            {
                //Ensures that first letter is a capital
                //if first letter is not capital letter
                if(!Character.isUpperCase(txtDescription.getText().charAt(0)))
                {
                    //error message displayed if first letter is not a capital letter
                    lblDSerr.setText("First letter must be capitalized*");
                    //set label and field to red indicating error
                    lblDSerr.setForeground(r);
                    txtDescription.setBorder(b);
                    txtDescription.setForeground(r);
                }
                //if first letter is in uppercase
                else
                {
                    //analyse each character to check if it is a letter
                    for(int i = 0; i < txtDescription.getText().length(); i++)
                    {
                        //Type and Logical check. Only letters should be used
                        //if letter at certain position is letter
                        if(Character.isLetter(txtDescription.getText().charAt(i)))
                        {
                            //Length check
                            //if input gerater than 1000 characters
                            if(txtDescription.getText().length() > 1000)
                            {
                                //error message to be displayed if first name greater than 50 characters
                                lblDSerr.setText("Ensure input has less than 1000 characters*");
                                //set label and field to red indicating error
                                lblDSerr.setForeground(r);
                                txtDescription.setBorder(b);
                                txtDescription.setForeground(r);
                            }
                            //if input less than 10 characters
                            else if(txtDescription.getText().length() < 10)
                            {
                                //error message to be displayed if first name less than 10 characters
                                lblDSerr.setText("Ensure input has more than 10 characters*");
                                //set label and field to red indicating error
                                lblDSerr.setForeground(r);
                                txtDescription.setBorder(b);
                                txtDescription.setForeground(r);
                            }
                            //if there are no errors
                            else
                            {
                                //Display stars indicating correct input
                                lblDSerr.setText("****");
                                //set label and field to indicate correct input
                                lblDSerr.setForeground(g);
                                txtDescription.setBorder(a);
                                txtDescription.setForeground(g);
                            }
                        }
                        //if charactr other than letters are found
                        else
                        {
                            //error message displayed if there are characters other than letters in input
                            lblDSerr.setText("Enter only letters*");
                            //set label and field to red indicating error
                            lblDSerr.setForeground(r);
                            txtDescription.setBorder(b);
                            txtDescription.setForeground(r);
                        }
                    }
                }
            }

            //Level Validation Checks
            //Presence Check
            //if neither of the check boxes have been selected
            if(!cb1.isSelected() && !cb2.isSelected() && !cb3.isSelected() && !cb4.isSelected())
            {
                //error message to be displayed if both check boxes have not been selected
                lblLVerr.setText("Level must be selected*");
                //set label and fields to red to indicate error
                lblLVerr.setForeground(r);
                cb1.setForeground(r);
                cb2.setForeground(r);
                cb3.setForeground(r);
                cb4.setForeground(r);
            }
            //if both of the check boxes have been selected
            else if((cb1.isSelected() && cb2.isSelected()) || (cb1.isSelected() && cb3.isSelected()) || (cb1.isSelected() && cb4.isSelected()) ||(cb2.isSelected() && cb3.isSelected()) || (cb2.isSelected() && cb4.isSelected()) || (cb3.isSelected() && cb4.isSelected()) || (cb1.isSelected() && cb2.isSelected() && cb3.isSelected()) || (cb1.isSelected() && cb2.isSelected() && cb4.isSelected()) || (cb1.isSelected() && cb3.isSelected() && cb4.isSelected()) || (cb2.isSelected() && cb3.isSelected() && cb4.isSelected()) || (cb1.isSelected() && cb2.isSelected() && cb3.isSelected() && cb4.isSelected()))
            {
                //error messgae to be displayed if both check boxes have been selected
                lblLVerr.setText("You may only select one option*");
                //set label and fields to red to indicate error
                lblLVerr.setForeground(r);
                cb1.setForeground(r);
                cb2.setForeground(r);
                cb3.setForeground(r);
                cb4.setForeground(r);
            }
            //if only one of the two has been selected
            else
            {
                //display stars to indicate correct input
                lblLVerr.setText("****");
                //set label and fields to green to indicate correct input
                lblLVerr.setForeground(g);
                cb1.setForeground(g);
                cb2.setForeground(g);
                cb3.setForeground(g);
                cb4.setForeground(g);
            }

            //If all data is valid
            if(lblOIDerr.getText().equals("****") && lblDSerr.getText().equals("****") && lblLVerr.getText().equals("****"))
            {
                //begin try-catch
                try
                {
                    String query = "INSERT INTO `offences`(`OffenceID`, `Description`, `Level`) VALUES (?, ?, ?)";
                    //get connection to database
                    con = DriverManager.getConnection("jdbc:mysql://localhost/consultations", "root", "");
                    pst = con.prepareStatement(query);
                    //insert data into database
                    pst.setString(1, txtOffenceID.getText());
                    pst.setString(2, txtDescription.getText());
                    if(cb1.isSelected())
                    {
                        level = 1;
                    }
                    else if(cb2.isSelected())
                    {
                        level = 2;
                    }
                    else if(cb3.isSelected())
                    {
                        level = 3;
                    }
                    else if(cb4.isSelected())
                    {
                        level = 4;
                    }
                    pst.setInt(3, level);
                    
                    pst.executeUpdate();
                    DefaultTableModel model = (DefaultTableModel)jTDisplay.getModel();
                    model.setRowCount(0);
                    Default();
                    //display data on jtable
                    JOptionPane.showMessageDialog(null, "Registered Successfully");
                    clear("", bl, c);
                }
                catch(HeadlessException | SQLException ex)
                {
                    JOptionPane.showMessageDialog(null, ex, "Error", JOptionPane.ERROR_MESSAGE);
                }
                //end of try-catch
            }
            else
            {
                //Message to be displayed if not all data is valid
                JOptionPane.showMessageDialog(null, "Check that all fields input correctly", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnRegisterActionPerformed

    private void cb1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cb1ActionPerformed

    private void cb2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cb2ActionPerformed

    private void jTDisplayMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTDisplayMouseClicked
        // TODO add your handling code here:
        Color bl = new Color(0, 0, 153);
        Border b = BorderFactory.createMatteBorder(1, 1, 3, 1, bl);
        clear("", bl, b);

        int i = jTDisplay.getSelectedRow();
        TableModel model = jTDisplay.getModel();

        txtOffenceID.setText(model.getValueAt(i, 0).toString());
        txtDescription.setText(model.getValueAt(i, 1).toString());
        String lev = model.getValueAt(i, 2).toString();
        if(lev.equals("1"))
        {
            cb1.setSelected(true);
            cb2.setSelected(false);
            cb3.setSelected(false);
            cb4.setSelected(false);
        }
        else if(lev.equals("2"))
        {
            cb1.setSelected(false);
            cb2.setSelected(true);
            cb3.setSelected(false);
            cb4.setSelected(false);
        }
        else if(lev.equals("3"))
        {
            cb1.setSelected(false);
            cb2.setSelected(false);
            cb3.setSelected(true);
            cb4.setSelected(false);
        }
        else if(lev.equals("4"))
        {
            cb1.setSelected(false);
            cb2.setSelected(false);
            cb3.setSelected(false);
            cb4.setSelected(true);
        }
    }//GEN-LAST:event_jTDisplayMouseClicked

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:

        Color bl = new Color(0, 0, 153);
        Border c = BorderFactory.createMatteBorder(1, 1, 3, 1, bl);

        //confirmation message asking user if they want to update
        int opt = JOptionPane.showConfirmDialog(null, "You are about to Update one row of data. Are you sure of this action?", "Update", JOptionPane.YES_NO_CANCEL_OPTION);
        //if user clicks yes
        if(opt == 0)
        {
            //validate data
            val();

            //if all data is valid
            if(lblOIDerr.getText().equals("****") && lblDSerr.getText().equals("****") && lblLVerr.getText().equals("****"))
            {
                //begin try-catch
                try
                {
                    //get connection to database
                    con = DriverManager.getConnection("jdbc:mysql://localhost/consultations", "root", "");
                    int num = jTDisplay.getSelectedRow();
                    String value = jTDisplay.getModel().getValueAt(num, 0).toString();
                    
                    String query = "UPDATE offences SET `OffenceID` = ?, `Description` = ?, `Level` = ? WHERE `OffenceID` = '" + value + "'";
                    String query2 = "UPDATE conLog SET `OffenceID` = '" + txtOffenceID.getText() + "' WHERE `OffenceID` = '" + value + "'";
                    
                    pst = con.prepareStatement(query);
                    ps = con.prepareStatement(query2);
                    
                    //update database
                    pst.setString(1, txtOffenceID.getText());
                    pst.setString(2, txtDescription.getText());
                    if(cb1.isSelected())
                    {
                        level = 1;
                    }
                    else if(cb2.isSelected())
                    {
                        level = 2;
                    }
                    else if(cb3.isSelected())
                    {
                        level = 3;
                    }
                    else if(cb4.isSelected())
                    {
                        level = 4;
                    }
                    pst.setInt(3, level);
                    pst.executeUpdate();
                    ps.executeUpdate();
                    
                    DefaultTableModel model = (DefaultTableModel)jTDisplay.getModel();
                    model.setRowCount(0);
                    Default();
                    //display message indicating success
                    JOptionPane.showMessageDialog(null, "Updated Successfully");
                    clear("", bl, c);
                }
                catch(HeadlessException | SQLException ex)
                {
                    JOptionPane.showMessageDialog(null, ex, "Error", JOptionPane.ERROR_MESSAGE);
                }
                //end of try-catch
            }
            //if not all data valid
            else
            {
                //display message indicating error
                JOptionPane.showMessageDialog(null, "Check that all data is valid", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        //if user clicks no
        else
        {
            //display message indicating abort
            JOptionPane.showMessageDialog(null, "Update Action Aborted");
            clear("", bl, c);
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        Color bl = new Color(0, 0, 153);
        Color r = new Color(156, 0, 0);

        Border b = BorderFactory.createMatteBorder(1, 1, 3, 1, r);
        Border c = BorderFactory.createMatteBorder(1, 1, 3, 1, bl);

        //change colour of fields to red
        changeColor("****", r, b);
        //confirmation message asking user if they want to delete row
        int opt = JOptionPane.showConfirmDialog(null, "You are about to Delete one row of data. Are you sure of this action?", "Delete", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        //if user clicks yes
        if(opt == 0)
        {
            if(txtOffenceID.getText().isEmpty())
            {
                changeColor("", bl, c);
                //error message to be displayed if character(s) not letters
                lblOIDerr.setText("Select data from table*");
                //set label and field to red to indicate error
                lblOIDerr.setForeground(r);
                txtOffenceID.setBorder(b);
                txtOffenceID.setForeground(r);
            }
            else
            {
                try
                {
                    con = DriverManager.getConnection("jdbc:mysql://localhost/consultations", "root", "");
                    String query = "SELECT * FROM offences WHERE OffenceID = '" + txtOffenceID.getText() + "'";
                    pst = con.prepareStatement(query);
                    ResultSet rs = pst.executeQuery(query);

                    if(rs.next())
                    {
                        //begin try-catch
                        try
                        {
                            //get connection to database
                            con = DriverManager.getConnection("jdbc:mysql://localhost/consultations", "root", "");
                            int num = jTDisplay.getSelectedRow();
                            String value = jTDisplay.getModel().getValueAt(num, 0).toString();
                            String query2 = "DELETE FROM offences WHERE OffenceID = '" + value + "'";
                            pst = con.prepareStatement(query2);
                            //delete data from database
                            pst.executeUpdate();

                            DefaultTableModel model = (DefaultTableModel)jTDisplay.getModel();
                            model.setRowCount(0);
                            Default();
                            clear("", bl, c);
                            //display message indicating success
                            JOptionPane.showMessageDialog(null, "Deleted Successfully");
                        }
                        catch(HeadlessException | SQLException ex)
                        {
                            JOptionPane.showMessageDialog(null, ex, "Error", JOptionPane.ERROR_MESSAGE);
                        }
                        //end of try-catch
                    }
                    else
                    {
                        changeColor("", bl, c);
                        //error message to be displayed if character(s) not letters
                        lblOIDerr.setText("SELECT DATA FROM TABLE*");
                        //set label and field to red to indicate error
                        lblOIDerr.setForeground(r);
                        txtOffenceID.setBorder(b);
                        txtOffenceID.setForeground(r);
                    }
                }
                catch(HeadlessException | SQLException ex)
                {
                    JOptionPane.showMessageDialog(null, ex, "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
        //if user clicks no
        else
        {
            //display message indicating abort
            JOptionPane.showMessageDialog(null, "Delete Action Aborted");
            clear("", bl, c);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnActionPerformed
        // TODO add your handling code here:
        //display main menu
        MainMenu menu = new MainMenu();
        menu.setVisible(true);
        //close current screen
        this.dispose();
    }//GEN-LAST:event_btnReturnActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        Color bl = new Color(0, 0, 153);
        Border c = BorderFactory.createMatteBorder(1, 1, 3, 1, bl);
        clear("", bl, c);
    }//GEN-LAST:event_btnClearActionPerformed

    private void jmiL1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiL1ActionPerformed
        // TODO add your handling code here:
        Filter("Level", "1");
    }//GEN-LAST:event_jmiL1ActionPerformed

    private void jmiASC_LVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiASC_LVActionPerformed
        // TODO add your handling code here:
        Sort("Level", "ASC");
    }//GEN-LAST:event_jmiASC_LVActionPerformed

    private void jmiASC_OIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiASC_OIDActionPerformed
        // TODO add your handling code here:
        Sort("OffenceID", "ASC");
    }//GEN-LAST:event_jmiASC_OIDActionPerformed

    private void jmiDESC_LVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiDESC_LVActionPerformed
        // TODO add your handling code here:
        Sort("Level", "DESC");
    }//GEN-LAST:event_jmiDESC_LVActionPerformed

    private void jmiDESC_OIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiDESC_OIDActionPerformed
        // TODO add your handling code here:
        Sort("OffenceID", "DESC");
    }//GEN-LAST:event_jmiDESC_OIDActionPerformed

    private void jmiL2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiL2ActionPerformed
        // TODO add your handling code here:
        Filter("Level", "2");
    }//GEN-LAST:event_jmiL2ActionPerformed

    private void lmiL3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lmiL3ActionPerformed
        // TODO add your handling code here:
        Filter("Level", "3");
    }//GEN-LAST:event_lmiL3ActionPerformed

    private void jmiL4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiL4ActionPerformed
        // TODO add your handling code here:
        Filter("Level", "4");
    }//GEN-LAST:event_jmiL4ActionPerformed

    private void jmRestoreMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jmRestoreMouseClicked
        // TODO add your handling code here:
        jTDisplay.setModel(new DefaultTableModel(null, new String[]{"Offence ID", "Description", "Level"}));
        Default();
    }//GEN-LAST:event_jmRestoreMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OffenceLog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OffenceLog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OffenceLog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OffenceLog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new OffenceLog().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnRegister;
    private javax.swing.JButton btnReturn;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JCheckBox cb1;
    private javax.swing.JCheckBox cb2;
    private javax.swing.JCheckBox cb3;
    private javax.swing.JCheckBox cb4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTDisplay;
    private javax.swing.JMenu jmASC;
    private javax.swing.JMenu jmDESC;
    private javax.swing.JMenu jmFilter;
    private javax.swing.JMenu jmRestore;
    private javax.swing.JMenu jmSort;
    private javax.swing.JMenuItem jmiASC_LV;
    private javax.swing.JMenuItem jmiASC_OID;
    private javax.swing.JMenuItem jmiDESC_LV;
    private javax.swing.JMenuItem jmiDESC_OID;
    private javax.swing.JMenuItem jmiL1;
    private javax.swing.JMenuItem jmiL2;
    private javax.swing.JMenuItem jmiL4;
    private javax.swing.JPopupMenu.Separator js1;
    private javax.swing.JPopupMenu.Separator js10;
    private javax.swing.JPopupMenu.Separator js11;
    private javax.swing.JPopupMenu.Separator js12;
    private javax.swing.JPopupMenu.Separator js13;
    private javax.swing.JPopupMenu.Separator js14;
    private javax.swing.JPopupMenu.Separator js2;
    private javax.swing.JPopupMenu.Separator js3;
    private javax.swing.JPopupMenu.Separator js4;
    private javax.swing.JPopupMenu.Separator js5;
    private javax.swing.JPopupMenu.Separator js6;
    private javax.swing.JPopupMenu.Separator js7;
    private javax.swing.JPopupMenu.Separator js8;
    private javax.swing.JPopupMenu.Separator js9;
    private javax.swing.JLabel lblDSerr;
    private javax.swing.JLabel lblDescription;
    private javax.swing.JLabel lblHelp;
    private javax.swing.JLabel lblLVerr;
    private javax.swing.JLabel lblLevel;
    private javax.swing.JLabel lblOIDerr;
    private javax.swing.JLabel lblOffenceID;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JMenuItem lmiL3;
    private javax.swing.JTextField txtDescription;
    private javax.swing.JTextField txtOffenceID;
    // End of variables declaration//GEN-END:variables
}
