package PAT;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.io.FileReader;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.util.Date;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.*;
import java.text.*;
import java.time.*;
import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.border.Border;
import javax.swing.table.*;


/**
 *
 * @author Banzile Nhlebela
 */
public class StudentOffenceRegister extends javax.swing.JFrame {

    /**
     * Creates new form StudentOffenceRegister
     */
    
    private Connection con = null;
    private PreparedStatement pst = null;
    private PreparedStatement ps = null;
    private String ab;
    
    public StudentOffenceRegister()
    {
        initComponents();
        //code to make screen appear in center of the device screen
        Toolkit toolkit = getToolkit();
        Dimension size = toolkit.getScreenSize();
        setLocation(size.width/2-getWidth()/2, size.height/2-getHeight()/2);
        //call default and set methods
        Default();
        setColours();
        set();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblHelp = new javax.swing.JLabel();
        lblStudentID = new javax.swing.JLabel();
        lblSanction = new javax.swing.JLabel();
        lblPT = new javax.swing.JLabel();
        lblOffenceID = new javax.swing.JLabel();
        lblDOO = new javax.swing.JLabel();
        txtStudentID = new javax.swing.JTextField();
        btnRegister = new javax.swing.JButton();
        cbYes = new javax.swing.JCheckBox();
        cbNo = new javax.swing.JCheckBox();
        jdcDOO = new com.toedter.calendar.JDateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTDisplay = new javax.swing.JTable();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnReturn = new javax.swing.JButton();
        cmbSanction = new javax.swing.JComboBox<>();
        lblSubject = new javax.swing.JLabel();
        cmbSubject = new javax.swing.JComboBox<>();
        lblOIDerr = new javax.swing.JLabel();
        lblSanerr = new javax.swing.JLabel();
        lblSuberr = new javax.swing.JLabel();
        lblPTerr = new javax.swing.JLabel();
        lblSIDerr = new javax.swing.JLabel();
        btnClear = new javax.swing.JButton();
        lblDOOerr = new javax.swing.JLabel();
        txtOffenceID = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuFilter = new javax.swing.JMenu();
        sep3 = new javax.swing.JPopupMenu.Separator();
        filterOFFID = new javax.swing.JMenu();
        sep5 = new javax.swing.JPopupMenu.Separator();
        OFFID_L1 = new javax.swing.JMenuItem();
        sep6 = new javax.swing.JPopupMenu.Separator();
        OFFID_L2 = new javax.swing.JMenuItem();
        sep7 = new javax.swing.JPopupMenu.Separator();
        OFFID_L3 = new javax.swing.JMenuItem();
        sep11 = new javax.swing.JPopupMenu.Separator();
        OFFID_L4 = new javax.swing.JMenuItem();
        sep16 = new javax.swing.JPopupMenu.Separator();
        sep1 = new javax.swing.JPopupMenu.Separator();
        filterSANC = new javax.swing.JMenu();
        sep12 = new javax.swing.JPopupMenu.Separator();
        SANC_N = new javax.swing.JMenuItem();
        sep13 = new javax.swing.JPopupMenu.Separator();
        SANC_AZ = new javax.swing.JMenuItem();
        sep14 = new javax.swing.JPopupMenu.Separator();
        SANC_VR = new javax.swing.JMenuItem();
        sep17 = new javax.swing.JPopupMenu.Separator();
        SANC_BD = new javax.swing.JMenuItem();
        sep15 = new javax.swing.JPopupMenu.Separator();
        SANC_FD = new javax.swing.JMenuItem();
        sep30 = new javax.swing.JPopupMenu.Separator();
        SANC_WW = new javax.swing.JMenuItem();
        sep31 = new javax.swing.JPopupMenu.Separator();
        SANC_HR = new javax.swing.JMenuItem();
        sep32 = new javax.swing.JPopupMenu.Separator();
        SANC_SU = new javax.swing.JMenuItem();
        sep34 = new javax.swing.JPopupMenu.Separator();
        SANC_EX = new javax.swing.JMenuItem();
        sep33 = new javax.swing.JPopupMenu.Separator();
        sep9 = new javax.swing.JPopupMenu.Separator();
        filterPT = new javax.swing.JMenu();
        sep23 = new javax.swing.JPopupMenu.Separator();
        PY_Yes = new javax.swing.JMenuItem();
        sep24 = new javax.swing.JPopupMenu.Separator();
        PT_No = new javax.swing.JMenuItem();
        sep25 = new javax.swing.JPopupMenu.Separator();
        sep8 = new javax.swing.JPopupMenu.Separator();
        filterSID = new javax.swing.JMenuItem();
        sep10 = new javax.swing.JPopupMenu.Separator();
        menuSort = new javax.swing.JMenu();
        sep26 = new javax.swing.JPopupMenu.Separator();
        sortSID = new javax.swing.JMenu();
        sep18 = new javax.swing.JPopupMenu.Separator();
        ASC_SID = new javax.swing.JMenuItem();
        sep19 = new javax.swing.JPopupMenu.Separator();
        DESC_SID = new javax.swing.JMenuItem();
        sep20 = new javax.swing.JPopupMenu.Separator();
        sep21 = new javax.swing.JPopupMenu.Separator();
        jMenu1 = new javax.swing.JMenu();
        ASC_OID = new javax.swing.JMenuItem();
        DESC_OID = new javax.swing.JMenuItem();
        sep22 = new javax.swing.JPopupMenu.Separator();
        sortSANC = new javax.swing.JMenuItem();
        sep27 = new javax.swing.JPopupMenu.Separator();
        sortSUB = new javax.swing.JMenuItem();
        sep28 = new javax.swing.JPopupMenu.Separator();
        sortPT = new javax.swing.JMenuItem();
        sep29 = new javax.swing.JPopupMenu.Separator();
        menuRestore = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Student Offence Register");

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setForeground(new java.awt.Color(0, 0, 0));
        jPanel1.setToolTipText("");

        jPanel2.setBackground(new java.awt.Color(0, 0, 102));

        jLabel1.setBackground(new java.awt.Color(0, 0, 102));
        jLabel1.setFont(new java.awt.Font("Agency FB", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Student Offence Register");

        lblHelp.setForeground(new java.awt.Color(255, 255, 255));
        lblHelp.setText("Help");
        lblHelp.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblHelp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblHelpMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblHelp)
                .addGap(19, 19, 19))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblHelp)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        lblStudentID.setForeground(new java.awt.Color(255, 255, 255));
        lblStudentID.setText("Student ID");

        lblSanction.setForeground(new java.awt.Color(255, 255, 255));
        lblSanction.setText("Sanction");

        lblPT.setForeground(new java.awt.Color(255, 255, 255));
        lblPT.setText("Parents Told");

        lblOffenceID.setForeground(new java.awt.Color(255, 255, 255));
        lblOffenceID.setText("Offence ID");

        lblDOO.setForeground(new java.awt.Color(255, 255, 255));
        lblDOO.setText("Date of Offence");

        txtStudentID.setBackground(new java.awt.Color(0, 0, 0));
        txtStudentID.setForeground(new java.awt.Color(0, 0, 153));
        txtStudentID.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 3, 1, new java.awt.Color(0, 0, 153)));
        txtStudentID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtStudentIDActionPerformed(evt);
            }
        });
        txtStudentID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtStudentIDKeyTyped(evt);
            }
        });

        btnRegister.setBackground(new java.awt.Color(0, 0, 0));
        btnRegister.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnRegister.setForeground(new java.awt.Color(255, 255, 255));
        btnRegister.setText("Register");
        btnRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterActionPerformed(evt);
            }
        });

        cbYes.setBackground(new java.awt.Color(0, 0, 0));
        cbYes.setForeground(new java.awt.Color(0, 0, 153));
        cbYes.setText("Yes");
        cbYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbYesActionPerformed(evt);
            }
        });

        cbNo.setBackground(new java.awt.Color(0, 0, 0));
        cbNo.setForeground(new java.awt.Color(0, 0, 153));
        cbNo.setText("No");
        cbNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbNoActionPerformed(evt);
            }
        });

        jdcDOO.setBackground(new java.awt.Color(0, 0, 0));
        jdcDOO.setForeground(new java.awt.Color(255, 255, 255));

        jTDisplay.setBackground(new java.awt.Color(0, 0, 0));
        jTDisplay.setBorder(new javax.swing.border.MatteBorder(null));
        jTDisplay.setForeground(new java.awt.Color(255, 255, 255));
        jTDisplay.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Student ID", "Offence ID", "Sanction", "Subject", "Parents Told", "Offence Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTDisplay.setGridColor(new java.awt.Color(0, 0, 153));
        jTDisplay.setSelectionForeground(new java.awt.Color(255, 255, 255));
        jTDisplay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTDisplayMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTDisplay);

        btnUpdate.setBackground(new java.awt.Color(0, 0, 0));
        btnUpdate.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(0, 0, 0));
        btnDelete.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnReturn.setBackground(new java.awt.Color(0, 0, 0));
        btnReturn.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnReturn.setForeground(new java.awt.Color(255, 255, 255));
        btnReturn.setText("Return");
        btnReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnActionPerformed(evt);
            }
        });

        cmbSanction.setBackground(new java.awt.Color(0, 0, 0));
        cmbSanction.setForeground(new java.awt.Color(0, 0, 153));
        cmbSanction.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sanction", "None", "Awarded Zero", "Verbal Reprimand", "Break Detention", "Friday Detention", "Hearing", "Suspension", "Writen Warning", "Expulsion" }));

        lblSubject.setForeground(new java.awt.Color(255, 255, 255));
        lblSubject.setText("Subject");

        cmbSubject.setBackground(new java.awt.Color(0, 0, 0));
        cmbSubject.setForeground(new java.awt.Color(0, 0, 153));
        cmbSubject.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Subject", "Mathematics", "Mathematical Literacy", "English", "Siswati", "Afrikaans", "French", "Life Orientation", "History", "Biology", "Life Sciences", "Geography", "Design Texhnology", "Engineering, Graphics and Design", "Physical Sciences", "Natural Science", "Accounts", "Economics", "Consumers", "Food Technology", "Computer Literacy", "Information Technology", "Business Studies", "Outside of Class", "After School Hours" }));

        btnClear.setBackground(new java.awt.Color(0, 0, 0));
        btnClear.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnClear.setForeground(new java.awt.Color(255, 255, 255));
        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        txtOffenceID.setBackground(new java.awt.Color(0, 0, 0));
        txtOffenceID.setForeground(new java.awt.Color(0, 0, 153));
        txtOffenceID.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 3, 1, new java.awt.Color(0, 0, 153)));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblOffenceID, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDOO)
                            .addComponent(lblStudentID, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPT))
                        .addGap(31, 31, 31)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(lblSIDerr))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cmbSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbSanction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblPTerr)
                                            .addComponent(lblSanerr)
                                            .addComponent(lblSuberr)))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(cbYes, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbNo, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtStudentID)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(lblOIDerr))
                            .addComponent(jdcDOO, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtOffenceID)))
                    .addComponent(btnReturn)
                    .addComponent(lblSanction, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSubject)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(121, 121, 121)
                        .addComponent(lblDOOerr)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnClear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRegister)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUpdate)
                        .addGap(12, 12, 12))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 547, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblStudentID)
                            .addComponent(txtStudentID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblSIDerr)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblOffenceID)
                            .addComponent(txtOffenceID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblOIDerr)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSanction)
                            .addComponent(cmbSanction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblSanerr)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSubject)
                            .addComponent(cmbSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblSuberr)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPT)
                            .addComponent(cbYes)
                            .addComponent(cbNo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblPTerr)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDOO)
                            .addComponent(jdcDOO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblDOOerr)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 108, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete)
                    .addComponent(btnRegister)
                    .addComponent(btnReturn)
                    .addComponent(btnClear))
                .addContainerGap())
        );

        jMenuBar1.setBackground(new java.awt.Color(0, 0, 0));
        jMenuBar1.setForeground(new java.awt.Color(0, 0, 0));

        menuFilter.setBackground(new java.awt.Color(0, 0, 102));
        menuFilter.setForeground(new java.awt.Color(0, 0, 0));
        menuFilter.setText("Filter");
        menuFilter.add(sep3);

        filterOFFID.setText("Offence ID");
        filterOFFID.add(sep5);

        OFFID_L1.setText("Level 1");
        OFFID_L1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OFFID_L1ActionPerformed(evt);
            }
        });
        filterOFFID.add(OFFID_L1);
        filterOFFID.add(sep6);

        OFFID_L2.setText("Level 2");
        OFFID_L2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OFFID_L2ActionPerformed(evt);
            }
        });
        filterOFFID.add(OFFID_L2);
        filterOFFID.add(sep7);

        OFFID_L3.setText("Level 3");
        OFFID_L3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OFFID_L3ActionPerformed(evt);
            }
        });
        filterOFFID.add(OFFID_L3);
        filterOFFID.add(sep11);

        OFFID_L4.setText("Level 4");
        OFFID_L4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OFFID_L4ActionPerformed(evt);
            }
        });
        filterOFFID.add(OFFID_L4);
        filterOFFID.add(sep16);

        menuFilter.add(filterOFFID);
        menuFilter.add(sep1);

        filterSANC.setText("Sanction");
        filterSANC.add(sep12);

        SANC_N.setText("None");
        SANC_N.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SANC_NActionPerformed(evt);
            }
        });
        filterSANC.add(SANC_N);
        filterSANC.add(sep13);

        SANC_AZ.setText("Awarded Zero");
        SANC_AZ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SANC_AZActionPerformed(evt);
            }
        });
        filterSANC.add(SANC_AZ);
        filterSANC.add(sep14);

        SANC_VR.setText("Verbal Reprimand");
        SANC_VR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SANC_VRActionPerformed(evt);
            }
        });
        filterSANC.add(SANC_VR);
        filterSANC.add(sep17);

        SANC_BD.setText("Break Detention");
        SANC_BD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SANC_BDActionPerformed(evt);
            }
        });
        filterSANC.add(SANC_BD);
        filterSANC.add(sep15);

        SANC_FD.setText("Friday Detention");
        SANC_FD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SANC_FDActionPerformed(evt);
            }
        });
        filterSANC.add(SANC_FD);
        filterSANC.add(sep30);

        SANC_WW.setText("Writen Warning");
        SANC_WW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SANC_WWActionPerformed(evt);
            }
        });
        filterSANC.add(SANC_WW);
        filterSANC.add(sep31);

        SANC_HR.setText("Hearing");
        SANC_HR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SANC_HRActionPerformed(evt);
            }
        });
        filterSANC.add(SANC_HR);
        filterSANC.add(sep32);

        SANC_SU.setText("Suspension");
        SANC_SU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SANC_SUActionPerformed(evt);
            }
        });
        filterSANC.add(SANC_SU);
        filterSANC.add(sep34);

        SANC_EX.setText("Expulsion");
        SANC_EX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SANC_EXActionPerformed(evt);
            }
        });
        filterSANC.add(SANC_EX);
        filterSANC.add(sep33);

        menuFilter.add(filterSANC);
        menuFilter.add(sep9);

        filterPT.setText("Parents Told");
        filterPT.add(sep23);

        PY_Yes.setText("Yes");
        PY_Yes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PY_YesActionPerformed(evt);
            }
        });
        filterPT.add(PY_Yes);
        filterPT.add(sep24);

        PT_No.setText("No");
        PT_No.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PT_NoActionPerformed(evt);
            }
        });
        filterPT.add(PT_No);
        filterPT.add(sep25);

        menuFilter.add(filterPT);
        menuFilter.add(sep8);

        filterSID.setText("Student ID");
        filterSID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterSIDActionPerformed(evt);
            }
        });
        menuFilter.add(filterSID);
        menuFilter.add(sep10);

        jMenuBar1.add(menuFilter);

        menuSort.setBackground(new java.awt.Color(0, 0, 102));
        menuSort.setForeground(new java.awt.Color(0, 0, 0));
        menuSort.setText("Sort");
        menuSort.add(sep26);

        sortSID.setText("Student ID");
        sortSID.add(sep18);

        ASC_SID.setText("Ascending");
        ASC_SID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ASC_SIDActionPerformed(evt);
            }
        });
        sortSID.add(ASC_SID);
        sortSID.add(sep19);

        DESC_SID.setText("Descending");
        DESC_SID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DESC_SIDActionPerformed(evt);
            }
        });
        sortSID.add(DESC_SID);
        sortSID.add(sep20);

        menuSort.add(sortSID);
        menuSort.add(sep21);

        jMenu1.setText("Offence ID");

        ASC_OID.setText("Ascending ");
        ASC_OID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ASC_OIDActionPerformed(evt);
            }
        });
        jMenu1.add(ASC_OID);

        DESC_OID.setText("Descending");
        DESC_OID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DESC_OIDActionPerformed(evt);
            }
        });
        jMenu1.add(DESC_OID);

        menuSort.add(jMenu1);
        menuSort.add(sep22);

        sortSANC.setText("Sanction");
        sortSANC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortSANCActionPerformed(evt);
            }
        });
        menuSort.add(sortSANC);
        menuSort.add(sep27);

        sortSUB.setText("Subject");
        sortSUB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortSUBActionPerformed(evt);
            }
        });
        menuSort.add(sortSUB);
        menuSort.add(sep28);

        sortPT.setText("Parents Told");
        sortPT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortPTActionPerformed(evt);
            }
        });
        menuSort.add(sortPT);
        menuSort.add(sep29);

        jMenuBar1.add(menuSort);

        menuRestore.setBackground(new java.awt.Color(0, 0, 102));
        menuRestore.setForeground(new java.awt.Color(0, 0, 0));
        menuRestore.setText("Restore");
        menuRestore.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuRestoreMouseClicked(evt);
            }
        });
        jMenuBar1.add(menuRestore);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lblHelpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblHelpMouseClicked
        // TODO add your handling code here:
        //display help screen
        Help h = new Help();
        h.setVisible(true);
    }//GEN-LAST:event_lblHelpMouseClicked

    //Changes colours of Table
    private void setColours()
    {
        Color bl = new Color(0, 0, 153);
        
        jTDisplay.setBackground(Color.black);
        jTDisplay.setForeground(bl);
        jTDisplay.getTableHeader().setForeground(bl);
        jTDisplay.getTableHeader().setBackground(Color.BLACK);
        jTDisplay.getTableHeader().setFont(new Font("Dialog", Font.BOLD, 12));
    }
    
    //method to count number of offences committed by a student
    private void count(String SID, String LV)
    {
        try
        {
            String query = "SELECT COUNT(*) FROM `conLog` WHERE `StudentID` = '" + SID + "' AND `OffenceID` LIKE \"%" + LV.substring(0,2) + "%\";";
            //get coonection to database
            con = DriverManager.getConnection("jdbc:mysql://localhost/consultations", "root", "");
            pst = con.prepareStatement(query);
            ResultSet rs = pst.executeQuery(query);
            
            if(rs.next())
            {
                int c = rs.getInt("COUNT(*)");
                
                if(c >= 3)
                {
                    String query2 = "SELECT * FROM studentLog WHERE `StudentID` = '" + SID + "';";
                    ps = con.prepareStatement(query2);
                    ResultSet r = ps.executeQuery(query2);
                    
                    if(r.next())
                    {
                        switch (LV.charAt(1)) 
                        {
                            case '1':
                                JOptionPane.showMessageDialog(null, "The Student Below has committed a number of Level 1 offences \nand must be recorded for a Level 2 (L2RPL1): \nName: " + r.getString("Firstname") + " " +  r.getString("Lastname") + "\nGrade: " + r.getInt("Grade"), "Repeated Offences", JOptionPane.ERROR_MESSAGE);
                                break;
                            case '2':
                                JOptionPane.showMessageDialog(null, "The Student Below has committed a number of Level 2 offences \nand must be recorded for a Level 3 (L3RPL2): \nName: " + r.getString("Firstname") + " " +  r.getString("Lastname") + "\nGrade: " + r.getInt("Grade"), "Repeated Offences", JOptionPane.ERROR_MESSAGE);
                                break;
                            case '3':
                                JOptionPane.showMessageDialog(null, "The Student Below has committed a number of Level 3 offences \nand must be recorded for a Level 4 (L4RPL3): \nName: " + r.getString("Firstname") + " " +  r.getString("Lastname") + "\nGrade: " + r.getInt("Grade"), "Repeated Offences", JOptionPane.ERROR_MESSAGE);
                                break;
                            default:
                                JOptionPane.showMessageDialog(null, "The Student Below has committed a number of Level 4 offences. \nFurther action must be taken: \nName: " + r.getString("Firstname") + " " +  r.getString("Lastname") + "\nGrade: " + r.getInt("Grade"), "Repeated Offences", JOptionPane.ERROR_MESSAGE);
                                break;
                        }
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "The Student selected has not committed enough \nsame level offences to warrent escalation");
                }
            }
        }
        catch(HeadlessException | SQLException ex)
        {
            JOptionPane.showMessageDialog(null, ex, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    //method to check position of user to restrict functions
    private void set()
    {
        //begin try-catch
        try
        {
            //open temp.txt file for reading
            try(Scanner sc = new Scanner(new FileReader("temp.txt")))
            {
                String line = sc.nextLine();
                try(Scanner ar = new Scanner(line).useDelimiter("#"))
                {
                    String un = ar.next();
                    String pass = ar.next();
                    String pos = ar.next();
                    
                    //create login object
                    Login log = new Login(un, pass, pos);
                    //if user is head of school or deputy head of school
                    if(log.getPosition().equals("Head Prefect") || log.getPosition().equals("Prefect"))
                    {
                        //disbale delete buttons
                        btnDelete.setEnabled(false);
                    }
                }
            }
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, ex, "Error", JOptionPane.ERROR_MESSAGE);
        }
        //end of try-catch
    }
    
    //method used for sorting
    private void Sort(String order /*either ASC or DESC*/, String value /*Whatever value user wants to sort by*/)
    {
        //clear data in jtable
        jTDisplay.setModel(new DefaultTableModel(null, new String[]{"Student ID", "Offence ID", "Sanction","Subject","Parents Told","Offence Date"}));
        //create array list of type user
        ArrayList<Cons> userList = new ArrayList<>();
        //begin try-catch
        try
        {
            //get connection to database
            con = DriverManager.getConnection("jdbc:mysql://localhost/consultations", "root", "");
            String query = "SELECT* FROM conlog ORDER BY " + value + " " + order;
            //get results from database
            ResultSet rs = (con.createStatement()).executeQuery(query);
            Cons user;
            
            //while data is available
            while(rs.next())
            {
                //store each row in the user list
                user = new Cons(rs.getString("StudentID"), rs.getString("OffenceID"), rs.getString("Sanction"), rs.getString("Subject"), rs.getString("ParentsTold"), rs.getString("DateOfOffence"));
                userList.add(user);
            }
        }
        catch(SQLException ex)
        {
            JOptionPane.showMessageDialog(null, ex, "Error", JOptionPane.ERROR_MESSAGE);
        }
        //end of try-catch
        
        ArrayList<Cons> List = userList;
        DefaultTableModel model = (DefaultTableModel)jTDisplay.getModel();
        Object[] row = new Object[6];
        
        //insert list data into jtable
        for(int i = 0; i < List.size(); i++)
        {
            row[0] = List.get(i).getStudentID();
            row[1] = List.get(i).getOffence();
            row[2] = List.get(i).getSanction();
            row[3] = List.get(i).getSubject();
            row[4] = List.get(i).getTold();
            row[5] = List.get(i).getDateOfOffence();
            model.addRow(row);
        }
    }
    
    //method used for filtering data
    private void Filter(String filter /*what you want to filter*/, String value/*filter condition*/)
    {
        //clear data in jtable
        jTDisplay.setModel(new DefaultTableModel(null, new String[]{"Student ID", "Offence ID", "Sanction","Subject","Parents Told","Offence Date"}));
        ArrayList<Cons> userList = new ArrayList<>();
        
        try
        {
            //get connction to database
            con = DriverManager.getConnection("jdbc:mysql://localhost/consultations", "root", "");
            String query = "SELECT * FROM conlog WHERE " + filter + " LIKE \"" + value + "%\" ORDER BY ParentsTold ASC";
            //get filtered data from database
            ResultSet rs = (con.createStatement()).executeQuery(query);
            Cons user;
            
            //insert data into array list
            while(rs.next())
            {
                user = new Cons(rs.getString("StudentID"), rs.getString("OffenceID"), rs.getString("Sanction"), rs.getString("Subject"), rs.getString("ParentsTold"), rs.getString("DateOfOffence"));
                userList.add(user);
            }
        }
        catch(SQLException ex)
        {
            JOptionPane.showMessageDialog(null, ex, "Error", JOptionPane.ERROR_MESSAGE);
        }
        //end of try-catch
        
        ArrayList<Cons> List = userList;
        DefaultTableModel model = (DefaultTableModel)jTDisplay.getModel();
        Object[] row = new Object[6];
        
        //insert data from userlist into jtable
        for(int i = 0; i < List.size(); i++)
        {
            row[0] = List.get(i).getStudentID();
            row[1] = List.get(i).getOffence();
            row[2] = List.get(i).getSanction();
            row[3] = List.get(i).getSubject();
            row[4] = List.get(i).getTold();
            row[5] = List.get(i).getDateOfOffence();
            model.addRow(row);
        }
    }
    
    //method used to search for particular row
    private void Search(String item /*what you will search by*/, String value/*what you want to search for*/)
    {
        //clear data from jtable
        jTDisplay.setModel(new DefaultTableModel(null, new String[]{"Student ID", "Offence ID", "Sanction","Subject","Parents Told","Offence Date"}));
        Cons[] userList = new Cons[400];
        int num = 0;
        try
        {
            //get connection to database
            con = DriverManager.getConnection("jdbc:mysql://localhost/consultations", "root", "");
            String query = "SELECT * FROM conlog WHERE " + item + " = '" + value + "' " + "ORDER BY ParentsTold";
            ResultSet rs = (con.createStatement()).executeQuery(query);
            
                //insert data from database into array
                while(rs.next())
                {
                    userList[num] = new Cons(rs.getString("StudentID"), rs.getString("OffenceID"), rs.getString("Sanction"), rs.getString("Subject"), rs.getString("ParentsTold"), rs.getString("DateOfOffence"));
                    num++;
                }
                
            DefaultTableModel model = (DefaultTableModel)jTDisplay.getModel();
            Object[] row = new Object[6];

            //insert data from array into jtable
            for(int i = 0; i < num; i++)
            {
                row[0] = userList[i].getStudentID();
                row[1] = userList[i].getOffence();
                row[2] = userList[i].getSanction();
                row[3] = userList[i].getSubject();
                row[4] = userList[i].getTold();
                row[5] = userList[i].getDateOfOffence();
                model.addRow(row);
            }
        }
        catch(SQLException ex)
        {
            JOptionPane.showMessageDialog(null, ex, "Error", JOptionPane.ERROR_MESSAGE);
        }
        //end of try-catch
    }
    
    //method to display all data from database in jtable
    private void Default()
    {
        ArrayList<Cons> userList = new ArrayList<>();
        try
        {
            con = DriverManager.getConnection("jdbc:mysql://localhost/consultations", "root", "");
            String query = "SELECT* FROM conlog";
            ResultSet rs = (con.createStatement()).executeQuery(query);
            Cons user;
            
            while(rs.next())
            {
                user = new Cons(rs.getString("StudentID"), rs.getString("OffenceID"), rs.getString("Sanction"), rs.getString("Subject"), rs.getString("ParentsTold"), rs.getString("DateOfOffence"));
                userList.add(user);
            }
        }
        catch(SQLException ex)
        {
            JOptionPane.showMessageDialog(null, ex, "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        ArrayList<Cons> List = userList;
        DefaultTableModel model = (DefaultTableModel)jTDisplay.getModel();
        Object[] row = new Object[6];
        
        for(int i = 0; i < List.size(); i++)
        {
            row[0] = List.get(i).getStudentID();
            row[1] = List.get(i).getOffence();
            row[2] = List.get(i).getSanction();
            row[3] = List.get(i).getSubject();
            row[4] = List.get(i).getTold();
            row[5] = List.get(i).getDateOfOffence();
            model.addRow(row);
        }
    }
    
    //method to change colour of fields
    private void changeColor(Color f, Border bb)
    {
        txtStudentID.setBorder(bb);
        txtStudentID.setForeground(f);
        txtOffenceID.setBorder(bb);
        txtOffenceID.setForeground(f);
        cbYes.setForeground(f);
        cbNo.setForeground(f);
    }
    
    //method to change text and colour of labels
    private void setLabels(String s, Color g)
    {
        lblSIDerr.setText(s);
        lblOIDerr.setText(s);
        lblSanerr.setText(s);
        lblSuberr.setText(s);
        lblPTerr.setText(s);
        lblDOOerr.setText(s);
        
        lblSIDerr.setForeground(g);
        lblOIDerr.setForeground(g);
        lblSanerr.setForeground(g);
        lblSuberr.setForeground(g);
        lblPTerr.setForeground(g);
        lblDOOerr.setForeground(g);
    }
    
    //clear method
    private void clear()
    {
        txtStudentID.setText("");
        txtOffenceID.setText("");
        cmbSanction.setSelectedIndex(0);
        cmbSubject.setSelectedIndex(0);
        jdcDOO.setDate(null);
        cbYes.setSelected(false);
        cbNo.setSelected(false);
        
        Color bl = new Color(0, 0, 153);
        Border c = BorderFactory.createMatteBorder(1, 1, 3, 1, bl);
        changeColor(bl, c);
        setLabels("", bl);
    }
    
    
    private void txtStudentIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtStudentIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtStudentIDActionPerformed

    private void btnRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterActionPerformed
        
        //colours used to indicate error or success
        Color r = new Color(156, 0, 0);
        Color g = new Color(15, 166, 7);
        
        Border b = BorderFactory.createMatteBorder(1, 1, 3, 1, r);
        Border a = BorderFactory.createMatteBorder(1, 1, 3, 1, g);
        
        //confirmstion message asking user if they want to register a record
        int opt = JOptionPane.showConfirmDialog(null, "You are about to Insert a new record. Are you sure of this action?", "Insert", JOptionPane.YES_NO_CANCEL_OPTION);
        //if user clicks yes
        if(opt == 0)
        {
            //Student ID Checks
            //Presence Check
            //if student id field is empty
            if(txtStudentID.getText().isEmpty())
            {
                //display error message
                lblSIDerr.setText("Student ID must be entered*");
                lblSIDerr.setForeground(r);
                txtStudentID.setBorder(b);
                txtStudentID.setForeground(r);
            }
            //if field is not empty
            else
            {
                //analyse each letter of input
                for(int i = 0; i < txtStudentID.getText().length(); i++)
                {
                    //Type and Logical check. Only letters and numbers should be used
                    //if character is letter or number
                    if(Character.isLetter(txtStudentID.getText().charAt(i)) || Character.isDigit(txtStudentID.getText().charAt(i)))
                    {
                        //Length check
                        //if input greater than 10 characters
                        if(txtStudentID.getText().length() > 10)
                        {
                            //display message indicating error
                            lblSIDerr.setText("Ensure input has less than 10 characters*");
                            lblSIDerr.setForeground(r);
                            txtStudentID.setBorder(b);
                            txtStudentID.setForeground(r);
                        }
                        //if input less than 5 characters
                        else if(txtStudentID.getText().length() < 5)
                        {
                            //display message indicating error
                            lblSIDerr.setText("Ensure input has more than 5 characters*");
                            lblSIDerr.setForeground(r);
                            txtStudentID.setBorder(b);
                            txtStudentID.setForeground(r);
                        }
                        //if no errors present
                        else
                        {
                            //display message indicating success
                            lblSIDerr.setText("****");
                            lblSIDerr.setForeground(g);
                            txtStudentID.setBorder(a);
                            txtStudentID.setForeground(g);
                        }
                    }
                    //if input does not consist of letters and numbers
                    else
                    {
                        lblSIDerr.setText("Enter only letters and/or numbers*");
                        lblSIDerr.setForeground(r);
                        txtStudentID.setBorder(b);
                        txtStudentID.setForeground(r);
                    }
                }
                
                //Begin try-catch
                try
                {
                    //get connection to database
                    con = DriverManager.getConnection("jdbc:mysql://localhost/consultations", "root", "");
                    String query = "SELECT* FROM studentLog WHERE StudentID = '" + txtStudentID.getText() + "'";
                    ResultSet rs = (con.createStatement()).executeQuery(query);
                    //if student ID found in table 
                    if(rs.next())
                    {
                        int j = JOptionPane.showConfirmDialog(null, "Student Information: \nName: " + rs.getString("Firstname") + " " + rs.getString("LastName")  + "\nGrade: " + rs.getInt("Grade"), "Register Offence for this student", JOptionPane.YES_NO_OPTION);
                        if(j == 0)
                        {
                            //display green stars to indicate correct input
                            lblSIDerr.setText("****");
                            lblSIDerr.setForeground(g);
                            txtStudentID.setBorder(a);
                            txtStudentID.setForeground(g);
                        }
                        else
                        {
                            //display green stars to indicate correct input
                            lblSIDerr.setText("Enter Correct Student ID*");
                            lblSIDerr.setForeground(r);
                            txtStudentID.setBorder(b);
                            txtStudentID.setForeground(r);
                        }
                    }
                    //if ID not found
                    else
                    {
                        //display message indicating error
                        lblSIDerr.setText("Student ID does not exist");
                        lblSIDerr.setForeground(r);
                        txtStudentID.setBorder(b);
                        txtStudentID.setForeground(r);
                    }
                }
                catch(SQLException ex)
                {
                    JOptionPane.showMessageDialog(null, ex, "Error", JOptionPane.ERROR_MESSAGE);
                }
                //end of try-catch
            }

            //Offence ID Checks
            //Presence Check
            //if offence id field is empty
            if(txtOffenceID.getText().isEmpty())
            {
                //display error message
                lblOIDerr.setText("Offence ID must be entered*");
                lblOIDerr.setForeground(r);
                txtOffenceID.setBorder(b);
                txtOffenceID.setForeground(r);
            }
            //if field is not empty
            else
            {
                //analyse each letter of input
                for(int i = 0; i < txtOffenceID.getText().length(); i++)
                {
                    //Type and Logical check. Only letters and numbers should be used
                    //if character is letter or number
                    if(Character.isLetter(txtOffenceID.getText().charAt(i)) || Character.isDigit(txtOffenceID.getText().charAt(i)))
                    {
                        //Length check
                        //if input greater than 7 characters
                        if(txtOffenceID.getText().length() > 7)
                        {
                            //display message indicating error
                            lblOIDerr.setText("Ensure input has less than 7 characters*");
                            lblOIDerr.setForeground(r);
                            txtOffenceID.setBorder(b);
                            txtOffenceID.setForeground(r);
                        }
                        //if input less than 3 characters
                        else if(txtOffenceID.getText().length() < 3)
                        {
                            //display message indicating error
                            lblOIDerr.setText("Ensure input has more than 2 characters*");
                            lblOIDerr.setForeground(r);
                            txtOffenceID.setBorder(b);
                            txtOffenceID.setForeground(r);
                        }
                        //if no errors present
                        else
                        {
                            //display message indicating success
                            lblOIDerr.setText("****");
                            lblOIDerr.setForeground(g);
                            txtOffenceID.setBorder(a);
                            txtOffenceID.setForeground(g);
                        }
                    }
                    //if input does not consist of letters and numbers
                    else
                    {
                        lblOIDerr.setText("Enter only letters and/or numbers*");
                        lblOIDerr.setForeground(r);
                        txtOffenceID.setBorder(b);
                        txtOffenceID.setForeground(r);
                    }
                }
                
                //Begin try-catch
                try
                {
                    //get connection to database
                    con = DriverManager.getConnection("jdbc:mysql://localhost/consultations", "root", "");
                    String query = "SELECT* FROM offences WHERE OffenceID = '" + txtOffenceID.getText() + "'";
                    ResultSet rs = (con.createStatement()).executeQuery(query);
                    //if offence ID found in table 
                    if(rs.next())
                    {
                        int j = JOptionPane.showConfirmDialog(null, "Offence Information: \nID: " + rs.getString("OffenceID")  + "\nDescription: " + rs.getString("Description"), "Offence Details", JOptionPane.YES_NO_OPTION);
                        if(j == 0)
                        {
                            //display green stars to indicate correct input
                            lblOIDerr.setText("****");
                            lblOIDerr.setForeground(g);
                            txtOffenceID.setBorder(a);
                            txtOffenceID.setForeground(g);
                        }
                        else
                        {
                            //display green stars to indicate correct input
                            lblOIDerr.setText("Enter Correct Offence ID*");
                            lblOIDerr.setForeground(r);
                            txtOffenceID.setBorder(b);
                            txtOffenceID.setForeground(r);
                        }
                    }
                    //if ID not found
                    else
                    {
                        //display message indicating error
                        lblOIDerr.setText("Offence ID does not exist");
                        lblOIDerr.setForeground(r);
                        txtOffenceID.setBorder(b);
                        txtOffenceID.setForeground(r);
                    }
                }
                catch(SQLException ex)
                {
                    JOptionPane.showMessageDialog(null, ex, "Error", JOptionPane.ERROR_MESSAGE);
                }
                //end of try-catch
            }

            //Sanction Checks
            //Presence Check
            //if sanction not selected
            if(cmbSanction.getSelectedItem().toString().equals("Sanction"))
            {
                //display message indicating error
                lblSanerr.setText("Sanction must be selected*");
                lblSanerr.setForeground(r);
            }
            //if selected
            else
            {
                //display message indicating correct input
               lblSanerr.setText("****");
               lblSanerr.setForeground(g);
            }

            //Subject Checks
            //Presence Check
            //if subject not selected
            if((cmbSubject.getSelectedItem().toString()).equals("Subject"))
            {
                //display message indicating error
                lblSuberr.setText("Grade must be selected*");
                lblSuberr.setForeground(r);
            }
            //if selected
            else
            {
                //display message indicating correct input
                lblSuberr.setText("****");
                lblSuberr.setForeground(g);
            }

            //'Parents Told' Checks
            //Presence Check
            //if none are selected
            if(!cbYes.isSelected() && !cbNo.isSelected())
            {
                //display message indicating error
                lblPTerr.setText("Select one option*");
                lblPTerr.setForeground(r);
                cbYes.setForeground(r);
                cbNo.setForeground(r);
            }
            //if both selected
            else if(cbYes.isSelected() && cbNo.isSelected())
            {
                //display message indicating error
                lblPTerr.setText("You may only select one option*");
                lblPTerr.setForeground(r);
                cbYes.setForeground(r);
                cbNo.setForeground(r);
            }
            //if only one is selected
            else
            {
                //display message indicating correct input
                lblPTerr.setText("****");
                lblPTerr.setForeground(g);
                cbYes.setForeground(g);
                cbNo.setForeground(g);
            }

            //Date of Offence Checks
            //Presence Check
            //if date not entered
            if(jdcDOO.getDate() == null)
            {
                //display message indicating error
                lblDOOerr.setText("Date of offence cannot be empty*");
                lblDOOerr.setForeground(r);
            }
            //if date entered
            else
            {
                //Year Logic Checks
                LocalDate birthday = jdcDOO.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                LocalDate currentDate = LocalDate.now();

                //Logic Check
                //if after current date
                if(birthday.isAfter(currentDate))
                {
                    //display message indicating error
                    lblDOOerr.setText("Offence date cannot be in the future*");
                    lblDOOerr.setForeground(r);
                }
                //if before current date
                else
                {
                    Period age = Period.between(birthday, currentDate);

                    //Range Check
                    //if offence took place over 1 month ago
                    if(age.getMonths() > 1)
                    {
                        //display message indicating error
                        lblDOOerr.setText("Offence took place too long ago*");
                        lblDOOerr.setForeground(r);
                    }
                    //if offence took place less than 1 month ago
                    else
                    {
                        //display message indicating correct input
                        lblDOOerr.setText("****");
                        lblDOOerr.setForeground(g);
                    }
                }
            }   
            
            //If all data is valid
            if(lblSIDerr.getText().equals("****") && lblOIDerr.getText().equals("****") && lblSanerr.getText().equals("****") && lblSuberr.getText().equals("****") && lblPTerr.getText().equals("****") && lblDOOerr.getText().equals("****"))
            {
                //begin try-catch
                try
                {
                    String query = "INSERT INTO `conLog`(`StudentID`, `OffenceID`, `Sanction`, "
                            + "`Subject`, `ParentsTold`, `DateOfOffence`) VALUES (?, ?, ?, ?, ?, ?)";
                    //get coonection to database
                    con = DriverManager.getConnection("jdbc:mysql://localhost/consultations", "root", "");
                    
                    //insert data into database
                    pst = con.prepareStatement(query);
                    pst.setString(1, txtStudentID.getText());
                    pst.setString(2, txtOffenceID.getText());
                    pst.setString(3, cmbSanction.getSelectedItem().toString());
                    pst.setString(4, cmbSubject.getSelectedItem().toString());
                    if(cbYes.isSelected())
                    {
                        ab = "Yes";
                    }
                    else if(cbNo.isSelected())
                    {
                        ab = "No";
                    }
                    pst.setString(5, ab);
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                    pst.setString(6, sdf.format(jdcDOO.getDate()));
                    pst.executeUpdate();
                    //display data in jtable
                    DefaultTableModel model = (DefaultTableModel)jTDisplay.getModel();
                    model.setRowCount(0);
                    Default();
                    //display message to indicate success
                    JOptionPane.showMessageDialog(null, "Registered Successfully", "Register", JOptionPane.INFORMATION_MESSAGE);
                    clear();
                }
                catch(HeadlessException | SQLException ex)
                {
                    JOptionPane.showMessageDialog(null, ex, "Error", JOptionPane.ERROR_MESSAGE);
                }
                //end of try-catch
            }
            //if not all data is valid
            else
            {
                //Message to be displayed if not all data is valid
                JOptionPane.showMessageDialog(null, "Check that all fields input correctly", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Check that all fields input correctly", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnRegisterActionPerformed

    private void cbYesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbYesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbYesActionPerformed

    private void cbNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbNoActionPerformed

    //display data from table on different fields
    private void jTDisplayMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTDisplayMouseClicked
        // TODO add your handling code here:
        
        clear();
        int i = jTDisplay.getSelectedRow();
        TableModel model = jTDisplay.getModel();

        //display student ID 
        String SID = model.getValueAt(i, 0).toString();
        txtStudentID.setText(SID);
        
        //display offence ID
        String OID = model.getValueAt(i, 1).toString();
        txtOffenceID.setText(OID);
        
        //display sanction
        String sanction = model.getValueAt(i, 2).toString();
        switch (sanction)
        {
            case "None":
            cmbSanction.setSelectedIndex(1);
            break;
            case "Awarded Zero":
            cmbSanction.setSelectedIndex(2);
            break;
            case "Verbal Reprimand":
            cmbSanction.setSelectedIndex(3);
            break;
            case "Break Detention":
            cmbSanction.setSelectedIndex(4);
            break;
            case "Friday Detention":
            cmbSanction.setSelectedIndex(5);
            break;
            case "Hearing":
            cmbSanction.setSelectedIndex(6);
            break;
            case "Suspension":
            cmbSanction.setSelectedIndex(7);
            break;
            case "Writen Warning":
            cmbSanction.setSelectedIndex(8);
            break;
            default:
            cmbSanction.setSelectedIndex(9);
            break;
            
        }
        
        //display 'parents told'
        String a = model.getValueAt(i, 4).toString();
        if(a.equals("Yes"))
        {
            cbYes.setSelected(true);
            cbNo.setSelected(false);
        }
        else
        {
            cbNo.setSelected(true);
            cbYes.setSelected(false);
        }

        //display subject
        String subject = model.getValueAt(i, 3).toString();
        switch (subject)
        {
            case "Mathematics":
            cmbSubject.setSelectedIndex(1);
            break;
            case "Mathematical Literacy":
            cmbSubject.setSelectedIndex(2);
            break;
            case "English":
            cmbSubject.setSelectedIndex(3);
            break;
            case "Siswati":
            cmbSubject.setSelectedIndex(4);
            break;
            case "Afrikaans":
            cmbSubject.setSelectedIndex(5);
            break;
            case "French":
            cmbSubject.setSelectedIndex(6);
            break;
            case "Life Orientation":
            cmbSubject.setSelectedIndex(7);
            break;
            case "History":
            cmbSubject.setSelectedIndex(8);
            break;
            case "Biology":
            cmbSubject.setSelectedIndex(9);
            break;
            case "Life Sciences":
            cmbSubject.setSelectedIndex(10);
            break;
            case "Geography":
            cmbSubject.setSelectedIndex(11);
            break;
            case "Design Technology":
            cmbSubject.setSelectedIndex(12);
            break;
            case "Engineering, Graphics and Design":
            cmbSubject.setSelectedIndex(13);
            break;
            case "Physical Sciences":
            cmbSubject.setSelectedIndex(14);
            break;
            case "Natural Sciences":
            cmbSubject.setSelectedIndex(15);
            break;
            case "Accounts":
            cmbSubject.setSelectedIndex(16);
            break;
            case "Economics":
            cmbSubject.setSelectedIndex(17);
            break;
            case "Consumers":
            cmbSubject.setSelectedIndex(18);
            break;
            case "Food Technology":
            cmbSubject.setSelectedIndex(19);
            break;
            case "Computer Literacy":
            cmbSubject.setSelectedIndex(20);
            break;
            case "Information Technology":
            cmbSubject.setSelectedIndex(21);
            break;
            case "Business Studies":
            cmbSubject.setSelectedIndex(22);
            break;
            case "Outside of Class":
            cmbSubject.setSelectedIndex(23);
            break;
            case "After School Hours":
            cmbSubject.setSelectedIndex(24);
            break;
            default:
        }
        
        //begin try-catch
        try
        {
            //display date of offence
            int r = jTDisplay.getSelectedRow();
            Date date = new SimpleDateFormat("yyyy-MM-dd").parse((String)model.getValueAt(r, 5));
            jdcDOO.setDate(date);
        }
        catch(ParseException ex)
        {
            JOptionPane.showMessageDialog(null, ex, "Error", JOptionPane.ERROR_MESSAGE);
        }
        //end of try-catch
        
        //call count method
        count(SID, OID);
    }//GEN-LAST:event_jTDisplayMouseClicked

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        Color r = new Color(156, 0, 0);
        Color g = new Color(15, 166, 7);
        
        Border b = BorderFactory.createMatteBorder(1, 1, 3, 1, r);
        Border a = BorderFactory.createMatteBorder(1, 1, 3, 1, g);
        
        
        //confirmation message asking user if they want to update row
        int opt = JOptionPane.showConfirmDialog(null, "You are about to Update one row of data. Are you sure of this action?", "Update", JOptionPane.YES_NO_CANCEL_OPTION);
        //if user clicks yes
        if(opt == 0)
        {
            //Student ID Checks
            //Presence Check
            //if student id field is empty
            if(txtStudentID.getText().isEmpty())
            {
                //display error message
                lblSIDerr.setText("Student ID must be entered*");
                lblSIDerr.setForeground(r);
                txtStudentID.setBorder(b);
                txtStudentID.setForeground(r);
            }
            //if field is not empty
            else
            {
                //analyse each letter of input
                for(int i = 0; i < txtStudentID.getText().length(); i++)
                {
                    //Type and Logical check. Only letters and numbers should be used
                    //if character is letter or number
                    if(Character.isLetter(txtStudentID.getText().charAt(i)) || Character.isDigit(txtStudentID.getText().charAt(i)))
                    {
                        //Length check
                        //if input greater than 10 characters
                        if(txtStudentID.getText().length() > 10)
                        {
                            //display message indicating error
                            lblSIDerr.setText("Ensure input has less than 10 characters*");
                            lblSIDerr.setForeground(r);
                            txtStudentID.setBorder(b);
                            txtStudentID.setForeground(r);
                        }
                        //if input less than 5 characters
                        else if(txtStudentID.getText().length() < 5)
                        {
                            //display message indicating error
                            lblSIDerr.setText("Ensure input has more than 5 characters*");
                            lblSIDerr.setForeground(r);
                            txtStudentID.setBorder(b);
                            txtStudentID.setForeground(r);
                        }
                        //if no errors present
                        else
                        {
                            //display message indicating success
                            lblSIDerr.setText("****");
                            lblSIDerr.setForeground(g);
                            txtStudentID.setBorder(a);
                            txtStudentID.setForeground(g);
                        }
                    }
                    //if input does not consist of letters and numbers
                    else
                    {
                        lblSIDerr.setText("Enter only letters and/or numbers*");
                        lblSIDerr.setForeground(r);
                        txtStudentID.setBorder(b);
                        txtStudentID.setForeground(r);
                    }
                }
                
                //Begin try-catch
                try
                {
                    //get connection to database
                    con = DriverManager.getConnection("jdbc:mysql://localhost/consultations", "root", "");
                    
                    int num = jTDisplay.getSelectedRow();
                    String value = jTDisplay.getModel().getValueAt(num, 0).toString();
                    
                    String query = "SELECT* FROM studentLog WHERE StudentID = '" + value + "'";
                    ResultSet rs = (con.createStatement()).executeQuery(query);
                    
                    //if student ID found in table 
                    if(rs.next())
                    {
                        int j = JOptionPane.showConfirmDialog(null, "Student Information: \nName: " + rs.getString("Firstname") + " " + rs.getString("LastName")  + "\nGrade: " + rs.getInt("Grade"), "Update Offence for this student", JOptionPane.YES_NO_OPTION);
                        if(j == 0)
                        {
                            //display green stars to indicate correct input
                            lblSIDerr.setText("****");
                            lblSIDerr.setForeground(g);
                            txtStudentID.setBorder(a);
                            txtStudentID.setForeground(g);
                        }
                        else
                        {
                            //display green stars to indicate correct input
                            lblSIDerr.setText("Enter desired Student ID*");
                            lblSIDerr.setForeground(r);
                            txtStudentID.setBorder(b);
                            txtStudentID.setForeground(r);
                        }
                    }
                }
                catch(SQLException ex)
                {
                    JOptionPane.showMessageDialog(null, ex, "Error", JOptionPane.ERROR_MESSAGE);
                }
                //end of try-catch
            }

            //Offence ID Checks
            //Presence Check
            //if offence id field is empty
            if(txtOffenceID.getText().isEmpty())
            {
                //display error message
                lblOIDerr.setText("Offence ID must be entered*");
                lblOIDerr.setForeground(r);
                txtOffenceID.setBorder(b);
                txtOffenceID.setForeground(r);
            }
            //if field is not empty
            else
            {
                //analyse each letter of input
                for(int i = 0; i < txtOffenceID.getText().length(); i++)
                {
                    //Type and Logical check. Only letters and numbers should be used
                    //if character is letter or number
                    if(Character.isLetter(txtOffenceID.getText().charAt(i)) || Character.isDigit(txtOffenceID.getText().charAt(i)))
                    {
                        //Length check
                        //if input greater than 7 characters
                        if(txtOffenceID.getText().length() > 7)
                        {
                            //display message indicating error
                            lblOIDerr.setText("Ensure input has less than 7 characters*");
                            lblOIDerr.setForeground(r);
                            txtOffenceID.setBorder(b);
                            txtOffenceID.setForeground(r);
                        }
                        //if input less than 3 characters
                        else if(txtOffenceID.getText().length() < 3)
                        {
                            //display message indicating error
                            lblOIDerr.setText("Ensure input has more than 3 characters*");
                            lblOIDerr.setForeground(r);
                            txtOffenceID.setBorder(b);
                            txtOffenceID.setForeground(r);
                        }
                        //if no errors present
                        else
                        {
                            //display message indicating success
                            lblOIDerr.setText("****");
                            lblOIDerr.setForeground(g);
                            txtOffenceID.setBorder(a);
                            txtOffenceID.setForeground(g);
                        }
                    }
                    //if input does not consist of letters and numbers
                    else
                    {
                        lblOIDerr.setText("Enter only letters and/or numbers*");
                        lblOIDerr.setForeground(r);
                        txtOffenceID.setBorder(b);
                        txtOffenceID.setForeground(r);
                    }
                }
                
                //begin try-catch
                try
                {
                    String query = "SELECT * FROM offences WHERE `OffenceID` = '" + txtOffenceID.getText() + "';";
                    //get connection to database
                    con = DriverManager.getConnection("jdbc:mysql://localhost/consultations", "root", "");
                    pst = con.prepareStatement(query);

                    ResultSet rs = pst.executeQuery(query);
                    //if offence ID found
                    if(rs.next())
                    {
                        //display message indicating error
                        lblOIDerr.setText("****");
                        lblOIDerr.setForeground(g);
                        txtOffenceID.setBorder(a);
                        txtOffenceID.setForeground(g);
                    }
                    //if not found
                    else
                    {
                        //display message indicating correct input
                        lblOIDerr.setText("Offence ID does not exist*");
                        lblOIDerr.setForeground(r);
                        txtOffenceID.setBorder(b);
                        txtOffenceID.setForeground(r);
                    }
                }
                catch(SQLException ex)
                {
                    JOptionPane.showMessageDialog(null, ex, "Error", JOptionPane.ERROR_MESSAGE);
                }
                //end of try-catch
            }

            //Sanction Checks
            //Presence Check
            //if sanction not selected
            if(cmbSanction.getSelectedItem().toString().equals("Sanction"))
            {
                //display message indicating error
                lblSanerr.setText("Sanction must be selected*");
                lblSanerr.setForeground(r);
            }
            //if selected
            else
            {
                //display message indicating correct input
               lblSanerr.setText("****");
               lblSanerr.setForeground(g);
            }

            //Subject Checks
            //Presence Check
            //if subject not selected
            if((cmbSubject.getSelectedItem().toString()).equals("Subject"))
            {
                //display message indicating error
                lblSuberr.setText("Grade must be selected*");
                lblSuberr.setForeground(r);
            }
            //if selected
            else
            {
                //display message indicating correct input
                lblSuberr.setText("****");
                lblSuberr.setForeground(g);
            }

            //'Parents Told' Checks
            //Presence Check
            //if none are selected
            if(!cbYes.isSelected() && !cbNo.isSelected())
            {
                //display message indicating error
                lblPTerr.setText("Select one option*");
                lblPTerr.setForeground(r);
                cbYes.setForeground(r);
                cbNo.setForeground(r);
            }
            //if both selected
            else if(cbYes.isSelected() && cbNo.isSelected())
            {
                //display message indicating error
                lblPTerr.setText("You may only select one option*");
                lblPTerr.setForeground(r);
                cbYes.setForeground(r);
                cbNo.setForeground(r);
            }
            //if only one is selected
            else
            {
                //display message indicating correct input
                lblPTerr.setText("****");
                lblPTerr.setForeground(g);
                cbYes.setForeground(g);
                cbNo.setForeground(g);
            }

            //Date of Offence Checks
            //Presence Check
            //if date not entered
            if(jdcDOO.getDate() == null)
            {
                //display message indicating error
                lblDOOerr.setText("Date of offence cannot be empty*");
                lblDOOerr.setForeground(r);
            }
            //if date entered
            else
            {
                //Year Logic Checks
                LocalDate birthday = jdcDOO.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                LocalDate currentDate = LocalDate.now();

                //Logic Check
                //if after current date
                if(birthday.isAfter(currentDate))
                {
                    //display message indicating error
                    lblDOOerr.setText("Offence date cannot be in the future*");
                    lblDOOerr.setForeground(r);
                }
                //if before current date
                else
                {
                    Period age = Period.between(birthday, currentDate);

                    //Range Check
                    //if offence took place over 1 month ago
                    if(age.getMonths() > 1)
                    {
                        //display message indicating error
                        lblDOOerr.setText("Offence took place too long ago*");
                        lblDOOerr.setForeground(r);
                    }
                    //if offence took place less than 1 month ago
                    else
                    {
                        //display message indicating correct input
                        lblDOOerr.setText("****");
                        lblDOOerr.setForeground(g);
                    }
                }
            }
            
            //if all data is valid
            if(lblSIDerr.getText().equals("****") && lblOIDerr.getText().equals("****") && lblSanerr.getText().equals("****") && lblSuberr.getText().equals("****") && lblPTerr.getText().equals("****") && lblDOOerr.getText().equals("****"))
            {
                //begin try-catch
                try
                {
                    //get connection to database
                    con = DriverManager.getConnection("jdbc:mysql://localhost/consultations", "root", "");
                    int num = jTDisplay.getSelectedRow();
                    String value = jTDisplay.getModel().getValueAt(num, 0).toString();
                    String query = "UPDATE conLog SET `StudentID` = ?, `OffenceID` = ?, `Sanction` = ?, `Subject` = ?, `ParentsTold` = ?, `DateOfOffence` = ? WHERE `StudentID` = '" + value + "'";
                    
                    //update database
                    pst = con.prepareStatement(query);

                    pst.setString(1, txtStudentID.getText());
                    pst.setString(2, txtOffenceID.getText());
                    pst.setString(3, cmbSanction.getSelectedItem().toString());
                    pst.setString(4, cmbSubject.getSelectedItem().toString());
                    if(cbYes.isSelected())
                    {
                        ab = "Yes";
                    }
                    else if(cbNo.isSelected())
                    {
                        ab = "No";
                    }
                    pst.setString(5, ab);
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                    pst.setString(6, sdf.format(jdcDOO.getDate()));
                    pst.executeUpdate();
                    DefaultTableModel model = (DefaultTableModel)jTDisplay.getModel();
                    model.setRowCount(0);
                    //display data in database on jtable
                    Default();
                    //display message indicating success
                    JOptionPane.showMessageDialog(null, "Updated Successfully", "Update", JOptionPane.INFORMATION_MESSAGE);
                    clear();
                }
                catch(HeadlessException | SQLException ex)
                {
                    JOptionPane.showMessageDialog(null, ex, "Error", JOptionPane.ERROR_MESSAGE);
                }
                //end of try-catch
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Check that all data is valid", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        //if user clicked no
        else
        {
            //display message indicating abort
            JOptionPane.showMessageDialog(null, "Update Action Aborted", "Update", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        
        Color r = new Color(156, 0, 0);
        Color blue = new Color(0, 0, 153);
        
        Border b = BorderFactory.createMatteBorder(1, 1, 3, 1, r);
        Border a = BorderFactory.createMatteBorder(1, 1, 3, 1, blue);
        
        changeColor(r, b);
        setLabels("****", r);
        
        //confirmation message asking user if they want to delete the record
        int opt = JOptionPane.showConfirmDialog(null, "You are about to Delete one row of data. Are you sure of this action?", "Delete", JOptionPane.YES_NO_CANCEL_OPTION);
        //if user says yes
        if(opt == 0)
        {
                //Begin try-catch
                try
                {
                    //get connection to database
                    con = DriverManager.getConnection("jdbc:mysql://localhost/consultations", "root", "");
                    
                    if(txtStudentID.getText().isEmpty())
                    {
                        changeColor(blue, a);
                        setLabels("", blue);
                        //display green stars to indicate correct input
                        lblSIDerr.setText("Select Data from Table*");
                        lblSIDerr.setForeground(r);
                        txtStudentID.setBorder(b);
                        txtStudentID.setForeground(r);
                    } 
                    else
                    {
                        int num = jTDisplay.getSelectedRow();
                        String value = jTDisplay.getModel().getValueAt(num, 0).toString();
                        String query = "SELECT* FROM studentLog WHERE StudentID = '" + value + "'";
                        ResultSet rs = (con.createStatement()).executeQuery(query);
                        
                        //if student ID found in table 
                        if(!rs.next())
                        {
                            changeColor(blue, a);
                            setLabels("", blue);
                            //display green stars to indicate correct input
                            lblSIDerr.setText("Select Data from Table*");
                            lblSIDerr.setForeground(r);
                            txtStudentID.setBorder(b);
                            txtStudentID.setForeground(r);
                        }
                        else
                        {
                            int j = JOptionPane.showConfirmDialog(null, "Student Information: \nName: " + rs.getString("Firstname") + " " + rs.getString("LastName")  + "\nGrade: " + rs.getInt("Grade"), "Delete Offence for this student", JOptionPane.YES_NO_OPTION);
                            if(j == 0)
                            {
                                //display red stars to indicate correct input
                                lblSIDerr.setText("****");
                            }
                            else
                            {
                                changeColor(blue, a);
                                setLabels("", blue);
                                //display green stars to indicate correct input
                                lblSIDerr.setText("Choose Correct Student*");
                                lblSIDerr.setForeground(r);
                                txtStudentID.setBorder(b);
                                txtStudentID.setForeground(r);
                            }
                        }
                    } 
                }
                catch(SQLException ex)
                {
                    JOptionPane.showMessageDialog(null, ex, "Error", JOptionPane.ERROR_MESSAGE);
                }
                //end of try-catch
            
            if(lblSIDerr.getText().equals("****"))
            {
                //begin try-catch
                try
                {
                    //get connection to database
                    con = DriverManager.getConnection("jdbc:mysql://localhost/consultations", "root", "");
                    int num = jTDisplay.getSelectedRow();

                    //get values from each column for specified row
                    String value = jTDisplay.getModel().getValueAt(num, 0).toString();
                    String value1 = jTDisplay.getModel().getValueAt(num, 1).toString();
                    String value2 = jTDisplay.getModel().getValueAt(num, 2).toString();
                    String value3 = jTDisplay.getModel().getValueAt(num, 3).toString();
                    String value4 = jTDisplay.getModel().getValueAt(num, 4).toString();
                    String value5 = jTDisplay.getModel().getValueAt(num, 5).toString();

                    String query = "SELECT * FROM conLog WHERE StudentID = '" + value + "' AND OffenceID = '" 
                                + value1 + "' AND Sanction = '" + value2 + "' AND Subject = '" 
                                + value3 + "' AND ParentsTold = '" + value4 + "' AND DateOfOffence = '" + value5 + "'";

                    ps = con.prepareStatement(query);
                    ResultSet rs = ps.executeQuery(query);
                    int temp = 0;

                    if(rs.next())
                    {
                        temp = rs.getInt("ID");
                    }

                    String query2 = "DELETE FROM conLog WHERE ID = '" + temp + "'";
                    pst = con.prepareStatement(query2);
                    //delete data from database
                    pst.executeUpdate();

                    DefaultTableModel model = (DefaultTableModel)jTDisplay.getModel();
                    model.setRowCount(0);
                    //display data in database
                    Default();
                    clear();
                    //display message indicating success
                    JOptionPane.showMessageDialog(null, "Deleted Successfully", "Delete", JOptionPane.INFORMATION_MESSAGE);
                }
                catch(HeadlessException | SQLException ex)
                {
                    JOptionPane.showMessageDialog(null, ex, "Error", JOptionPane.ERROR_MESSAGE);
                }
                //end of try-catch
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Check fields are input correctly", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        //if user says no
        else
        {
            //display message
            JOptionPane.showMessageDialog(null, "Delete Action Aborted", "Delete", JOptionPane.INFORMATION_MESSAGE);
            clear();
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnActionPerformed
        // TODO add your handling code here:
        //display main menu screen
        MainMenu menu = new MainMenu();
        menu.setVisible(true);
        //close current screen 
        this.dispose();
    }//GEN-LAST:event_btnReturnActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        clear();
    }//GEN-LAST:event_btnClearActionPerformed

    private void txtStudentIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtStudentIDKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtStudentIDKeyTyped

    private void OFFID_L1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OFFID_L1ActionPerformed
        // TODO add your handling code here:
        //display data only where offence = homework not done
        Filter("OffenceID", "L1");
    }//GEN-LAST:event_OFFID_L1ActionPerformed

    private void OFFID_L2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OFFID_L2ActionPerformed
        // TODO add your handling code here:
        //display data only where offence = work not submitted
        Filter("OffenceID", "L2");
    }//GEN-LAST:event_OFFID_L2ActionPerformed

    private void SANC_NActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SANC_NActionPerformed
        // TODO add your handling code here:
        //display data only where sanction = none
        Filter("Sanction", "None");
    }//GEN-LAST:event_SANC_NActionPerformed

    private void SANC_AZActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SANC_AZActionPerformed
        // TODO add your handling code here:
        //display data only where sanction = awarded zero
        Filter("Sanction", "Awarded Zero");
    }//GEN-LAST:event_SANC_AZActionPerformed

    private void SANC_BDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SANC_BDActionPerformed
        // TODO add your handling code here:
        //display data only where sanction = break detention
        Filter("Sanction", "Break Detention");
    }//GEN-LAST:event_SANC_BDActionPerformed

    private void SANC_FDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SANC_FDActionPerformed
        // TODO add your handling code here:
        //display data only where sanction = friday detention
        Filter("Santion", "Friday Detention");
    }//GEN-LAST:event_SANC_FDActionPerformed

    private void ASC_SIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ASC_SIDActionPerformed
        // TODO add your handling code here:
        //sort by student ID in ascending order
        Sort("ASC", "StudentID");
    }//GEN-LAST:event_ASC_SIDActionPerformed

    private void DESC_SIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DESC_SIDActionPerformed
        // TODO add your handling code here:
        //sort by student ID in descending order
        Sort("DESC", "StudentID");
    }//GEN-LAST:event_DESC_SIDActionPerformed

    private void menuRestoreMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuRestoreMouseClicked
        // TODO add your handling code here:
        //remove any current data in jtable
        jTDisplay.setModel(new DefaultTableModel(null, new String[]{"Student ID", "Offence ID", "Sanction","Subject","Parents Told","Offence Date"}));
        //restore original data in jtable
        Default();
    }//GEN-LAST:event_menuRestoreMouseClicked

    private void OFFID_L3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OFFID_L3ActionPerformed
        // TODO add your handling code here:
        //display data only where offence = lesson not attended
        Filter("OffenceID", "L3");
    }//GEN-LAST:event_OFFID_L3ActionPerformed

    private void PY_YesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PY_YesActionPerformed
        // TODO add your handling code here:
        //display data only where parents told = yes
        Filter("ParentsTold", "Yes");
    }//GEN-LAST:event_PY_YesActionPerformed

    private void PT_NoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PT_NoActionPerformed
        // TODO add your handling code here:
        //display data only where parents told = no
        Filter("ParentsTold", "No");
    }//GEN-LAST:event_PT_NoActionPerformed

    private void filterSIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterSIDActionPerformed
        // TODO add your handling code here:
        String v = JOptionPane.showInputDialog(null, "Enter Student ID");
        //search for student ID
        Search("StudentID", v);
    }//GEN-LAST:event_filterSIDActionPerformed

    private void sortSANCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortSANCActionPerformed
        // TODO add your handling code here:
        //sort by sanction in ascending order
        Sort("ASC", "Sanction");
    }//GEN-LAST:event_sortSANCActionPerformed

    private void sortSUBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortSUBActionPerformed
        // TODO add your handling code here:
        //sort by subject in ascending order
        Sort("ASC", "Subject");
    }//GEN-LAST:event_sortSUBActionPerformed

    private void sortPTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortPTActionPerformed
        // TODO add your handling code here:
        //sort by partents told in ascending order
        Sort("DESC", "ParentsTold");
    }//GEN-LAST:event_sortPTActionPerformed

    private void SANC_VRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SANC_VRActionPerformed
        // TODO add your handling code here:
        Filter("Sanction", "Verbal Reprimand");
    }//GEN-LAST:event_SANC_VRActionPerformed

    private void SANC_WWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SANC_WWActionPerformed
        // TODO add your handling code here:
        Filter("Sanction", "Writen Warning");
    }//GEN-LAST:event_SANC_WWActionPerformed

    private void SANC_SUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SANC_SUActionPerformed
        // TODO add your handling code here:
        Filter("Sanction", "Suspension");
    }//GEN-LAST:event_SANC_SUActionPerformed

    private void SANC_HRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SANC_HRActionPerformed
        // TODO add your handling code here:
        Filter("Sanction", "Hearing");
    }//GEN-LAST:event_SANC_HRActionPerformed

    private void SANC_EXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SANC_EXActionPerformed
        // TODO add your handling code here:
        Filter("Sanction", "Expulsion");
    }//GEN-LAST:event_SANC_EXActionPerformed

    private void OFFID_L4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OFFID_L4ActionPerformed
        // TODO add your handling code here:
        Filter("OffenceID", "L4");
    }//GEN-LAST:event_OFFID_L4ActionPerformed

    private void ASC_OIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ASC_OIDActionPerformed
        // TODO add your handling code here:
        Sort("ASC", "OffenceID");
    }//GEN-LAST:event_ASC_OIDActionPerformed

    private void DESC_OIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DESC_OIDActionPerformed
        // TODO add your handling code here:
        Sort("DESC", "OffenceID");
    }//GEN-LAST:event_DESC_OIDActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentOffenceRegister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentOffenceRegister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentOffenceRegister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentOffenceRegister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new StudentOffenceRegister().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem ASC_OID;
    private javax.swing.JMenuItem ASC_SID;
    private javax.swing.JMenuItem DESC_OID;
    private javax.swing.JMenuItem DESC_SID;
    private javax.swing.JMenuItem OFFID_L1;
    private javax.swing.JMenuItem OFFID_L2;
    private javax.swing.JMenuItem OFFID_L3;
    private javax.swing.JMenuItem OFFID_L4;
    private javax.swing.JMenuItem PT_No;
    private javax.swing.JMenuItem PY_Yes;
    private javax.swing.JMenuItem SANC_AZ;
    private javax.swing.JMenuItem SANC_BD;
    private javax.swing.JMenuItem SANC_EX;
    private javax.swing.JMenuItem SANC_FD;
    private javax.swing.JMenuItem SANC_HR;
    private javax.swing.JMenuItem SANC_N;
    private javax.swing.JMenuItem SANC_SU;
    private javax.swing.JMenuItem SANC_VR;
    private javax.swing.JMenuItem SANC_WW;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnRegister;
    private javax.swing.JButton btnReturn;
    private javax.swing.JButton btnUpdate;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox cbNo;
    private javax.swing.JCheckBox cbYes;
    private javax.swing.JComboBox<String> cmbSanction;
    private javax.swing.JComboBox<String> cmbSubject;
    private javax.swing.JMenu filterOFFID;
    private javax.swing.JMenu filterPT;
    private javax.swing.JMenu filterSANC;
    private javax.swing.JMenuItem filterSID;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTDisplay;
    private com.toedter.calendar.JDateChooser jdcDOO;
    private javax.swing.JLabel lblDOO;
    private javax.swing.JLabel lblDOOerr;
    private javax.swing.JLabel lblHelp;
    private javax.swing.JLabel lblOIDerr;
    private javax.swing.JLabel lblOffenceID;
    private javax.swing.JLabel lblPT;
    private javax.swing.JLabel lblPTerr;
    private javax.swing.JLabel lblSIDerr;
    private javax.swing.JLabel lblSanction;
    private javax.swing.JLabel lblSanerr;
    private javax.swing.JLabel lblStudentID;
    private javax.swing.JLabel lblSuberr;
    private javax.swing.JLabel lblSubject;
    private javax.swing.JMenu menuFilter;
    private javax.swing.JMenu menuRestore;
    private javax.swing.JMenu menuSort;
    private javax.swing.JPopupMenu.Separator sep1;
    private javax.swing.JPopupMenu.Separator sep10;
    private javax.swing.JPopupMenu.Separator sep11;
    private javax.swing.JPopupMenu.Separator sep12;
    private javax.swing.JPopupMenu.Separator sep13;
    private javax.swing.JPopupMenu.Separator sep14;
    private javax.swing.JPopupMenu.Separator sep15;
    private javax.swing.JPopupMenu.Separator sep16;
    private javax.swing.JPopupMenu.Separator sep17;
    private javax.swing.JPopupMenu.Separator sep18;
    private javax.swing.JPopupMenu.Separator sep19;
    private javax.swing.JPopupMenu.Separator sep20;
    private javax.swing.JPopupMenu.Separator sep21;
    private javax.swing.JPopupMenu.Separator sep22;
    private javax.swing.JPopupMenu.Separator sep23;
    private javax.swing.JPopupMenu.Separator sep24;
    private javax.swing.JPopupMenu.Separator sep25;
    private javax.swing.JPopupMenu.Separator sep26;
    private javax.swing.JPopupMenu.Separator sep27;
    private javax.swing.JPopupMenu.Separator sep28;
    private javax.swing.JPopupMenu.Separator sep29;
    private javax.swing.JPopupMenu.Separator sep3;
    private javax.swing.JPopupMenu.Separator sep30;
    private javax.swing.JPopupMenu.Separator sep31;
    private javax.swing.JPopupMenu.Separator sep32;
    private javax.swing.JPopupMenu.Separator sep33;
    private javax.swing.JPopupMenu.Separator sep34;
    private javax.swing.JPopupMenu.Separator sep5;
    private javax.swing.JPopupMenu.Separator sep6;
    private javax.swing.JPopupMenu.Separator sep7;
    private javax.swing.JPopupMenu.Separator sep8;
    private javax.swing.JPopupMenu.Separator sep9;
    private javax.swing.JMenuItem sortPT;
    private javax.swing.JMenuItem sortSANC;
    private javax.swing.JMenu sortSID;
    private javax.swing.JMenuItem sortSUB;
    private javax.swing.JTextField txtOffenceID;
    private javax.swing.JTextField txtStudentID;
    // End of variables declaration//GEN-END:variables
}
