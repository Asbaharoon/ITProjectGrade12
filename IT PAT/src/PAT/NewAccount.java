package PAT;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.border.Border;

/**
 *
 * @author Banzile Nhlebela
 */
public class NewAccount extends javax.swing.JFrame {

    /**
     * Creates new form NewAccount
     */
    private Connection con = null;
    private PreparedStatement pst = null;
    private PreparedStatement ps = null;
    private String gender;
    
    public NewAccount()
    {
        initComponents();
        //code to make screen appear in the center of device screen
        Toolkit toolkit = getToolkit();
        Dimension size = toolkit.getScreenSize();
        setLocation(size.width/2-getWidth()/2, size.height/2-getHeight()/2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        lblFName = new javax.swing.JLabel();
        lblUsername = new javax.swing.JLabel();
        lblLName = new javax.swing.JLabel();
        lblDOB = new javax.swing.JLabel();
        lblPosition = new javax.swing.JLabel();
        lblGender = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        txtFName = new javax.swing.JTextField();
        cmbPos = new javax.swing.JComboBox<>();
        pfPass = new javax.swing.JPasswordField();
        jdcDOB = new com.toedter.calendar.JDateChooser();
        cbMale = new javax.swing.JCheckBox();
        cbFemale = new javax.swing.JCheckBox();
        txtLName = new javax.swing.JTextField();
        txtUN = new javax.swing.JTextField();
        lblFNerr = new javax.swing.JLabel();
        lblLNerr = new javax.swing.JLabel();
        lblGENerr = new javax.swing.JLabel();
        lblDOBerr = new javax.swing.JLabel();
        lblUNerr = new javax.swing.JLabel();
        lblPWDerr = new javax.swing.JLabel();
        lblPOSerr = new javax.swing.JLabel();
        btnReturn = new javax.swing.JButton();
        btnCreate = new javax.swing.JButton();
        lblEye = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        WhiteBand = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblHelp = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("New Account Page");
        setName("New Account Page"); // NOI18N

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel4.setBackground(new java.awt.Color(0, 0, 0));
        jPanel4.setForeground(new java.awt.Color(0, 0, 0));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblFName.setForeground(new java.awt.Color(255, 255, 255));
        lblFName.setText("First Name");
        jPanel4.add(lblFName, new org.netbeans.lib.awtextra.AbsoluteConstraints(47, 32, -1, -1));

        lblUsername.setForeground(new java.awt.Color(255, 255, 255));
        lblUsername.setText("Username");
        jPanel4.add(lblUsername, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 130, -1, -1));

        lblLName.setForeground(new java.awt.Color(255, 255, 255));
        lblLName.setText("Last Name");
        jPanel4.add(lblLName, new org.netbeans.lib.awtextra.AbsoluteConstraints(47, 130, -1, -1));

        lblDOB.setForeground(new java.awt.Color(255, 255, 255));
        lblDOB.setText("Date of Birth");
        jPanel4.add(lblDOB, new org.netbeans.lib.awtextra.AbsoluteConstraints(47, 334, -1, -1));

        lblPosition.setForeground(new java.awt.Color(255, 255, 255));
        lblPosition.setText("Position");
        jPanel4.add(lblPosition, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 23, -1, -1));

        lblGender.setForeground(new java.awt.Color(255, 255, 255));
        lblGender.setText("Gender");
        jPanel4.add(lblGender, new org.netbeans.lib.awtextra.AbsoluteConstraints(47, 236, -1, -1));

        lblPassword.setForeground(new java.awt.Color(255, 255, 255));
        lblPassword.setText("Password");
        jPanel4.add(lblPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 248, -1, -1));

        txtFName.setBackground(new java.awt.Color(0, 0, 0));
        txtFName.setForeground(new java.awt.Color(255, 204, 0));
        txtFName.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 3, 1, new java.awt.Color(255, 204, 0)));
        jPanel4.add(txtFName, new org.netbeans.lib.awtextra.AbsoluteConstraints(47, 58, 224, -1));

        cmbPos.setBackground(new java.awt.Color(0, 0, 0));
        cmbPos.setForeground(new java.awt.Color(255, 204, 0));
        cmbPos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Position", "Head of School", "Deputy Head of School", "Head of Department", "Teacher", "Head Prefect", "Prefect" }));
        cmbPos.setBorder(null);
        jPanel4.add(cmbPos, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 51, 210, -1));

        pfPass.setBackground(new java.awt.Color(0, 0, 0));
        pfPass.setForeground(new java.awt.Color(255, 204, 0));
        pfPass.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 3, 1, new java.awt.Color(255, 204, 0)));
        pfPass.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                pfPassKeyTyped(evt);
            }
        });
        jPanel4.add(pfPass, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 270, 210, -1));

        jdcDOB.setBackground(new java.awt.Color(0, 0, 0));
        jdcDOB.setForeground(new java.awt.Color(0, 0, 153));
        jPanel4.add(jdcDOB, new org.netbeans.lib.awtextra.AbsoluteConstraints(47, 356, 224, -1));

        cbMale.setBackground(new java.awt.Color(0, 0, 0));
        buttonGroup1.add(cbMale);
        cbMale.setForeground(new java.awt.Color(255, 204, 0));
        cbMale.setText("Male");
        jPanel4.add(cbMale, new org.netbeans.lib.awtextra.AbsoluteConstraints(47, 257, -1, -1));

        cbFemale.setBackground(new java.awt.Color(0, 0, 0));
        buttonGroup1.add(cbFemale);
        cbFemale.setForeground(new java.awt.Color(255, 204, 0));
        cbFemale.setText("Female");
        jPanel4.add(cbFemale, new org.netbeans.lib.awtextra.AbsoluteConstraints(108, 257, -1, -1));

        txtLName.setBackground(new java.awt.Color(0, 0, 0));
        txtLName.setForeground(new java.awt.Color(255, 204, 0));
        txtLName.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 3, 1, new java.awt.Color(255, 204, 0)));
        jPanel4.add(txtLName, new org.netbeans.lib.awtextra.AbsoluteConstraints(47, 152, 224, -1));

        txtUN.setBackground(new java.awt.Color(0, 0, 0));
        txtUN.setForeground(new java.awt.Color(255, 204, 0));
        txtUN.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 3, 1, new java.awt.Color(255, 204, 0)));
        txtUN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUNActionPerformed(evt);
            }
        });
        jPanel4.add(txtUN, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 152, 210, -1));
        jPanel4.add(lblFNerr, new org.netbeans.lib.awtextra.AbsoluteConstraints(47, 88, -1, -1));
        jPanel4.add(lblLNerr, new org.netbeans.lib.awtextra.AbsoluteConstraints(47, 182, -1, -1));
        jPanel4.add(lblGENerr, new org.netbeans.lib.awtextra.AbsoluteConstraints(47, 287, -1, -1));
        jPanel4.add(lblDOBerr, new org.netbeans.lib.awtextra.AbsoluteConstraints(47, 391, -1, -1));
        jPanel4.add(lblUNerr, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 182, -1, -1));
        jPanel4.add(lblPWDerr, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 298, -1, -1));
        jPanel4.add(lblPOSerr, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 80, -1, -1));

        btnReturn.setBackground(new java.awt.Color(0, 0, 0));
        btnReturn.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnReturn.setForeground(new java.awt.Color(255, 204, 0));
        btnReturn.setText("Return");
        btnReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnActionPerformed(evt);
            }
        });
        jPanel4.add(btnReturn, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 380, -1, -1));

        btnCreate.setBackground(new java.awt.Color(0, 0, 0));
        btnCreate.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnCreate.setForeground(new java.awt.Color(255, 204, 0));
        btnCreate.setText("Create");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });
        jPanel4.add(btnCreate, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 380, -1, -1));

        lblEye.setIcon(new javax.swing.ImageIcon("C:\\Users\\eliznab74\\Documents\\NetBeansProjects\\IT PAT\\closed.png")); // NOI18N
        lblEye.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblEye.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblEyeMouseClicked(evt);
            }
        });
        jPanel4.add(lblEye, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 270, -1, -1));

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 230, 731, 420));

        jPanel2.setBackground(new java.awt.Color(0, 0, 102));
        jPanel2.setForeground(new java.awt.Color(0, 0, 102));

        WhiteBand.setBackground(new java.awt.Color(255, 255, 255));
        WhiteBand.setForeground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 102));
        jLabel1.setText("ENJABULWENI SCHOOL");

        jLabel2.setFont(new java.awt.Font("Edwardian Script ITC", 0, 30)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("\"Sifundza Kanyekanye\" - Together we Learn");

        jLabel3.setIcon(new javax.swing.ImageIcon("C:\\Users\\eliznab74\\Pictures\\Badge.jpg")); // NOI18N

        lblHelp.setForeground(new java.awt.Color(0, 0, 0));
        lblHelp.setText("Help");
        lblHelp.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblHelp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblHelpMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout WhiteBandLayout = new javax.swing.GroupLayout(WhiteBand);
        WhiteBand.setLayout(WhiteBandLayout);
        WhiteBandLayout.setHorizontalGroup(
            WhiteBandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, WhiteBandLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(WhiteBandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(WhiteBandLayout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(WhiteBandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)))
                    .addGroup(WhiteBandLayout.createSequentialGroup()
                        .addGap(460, 460, 460)
                        .addComponent(lblHelp)))
                .addContainerGap())
        );
        WhiteBandLayout.setVerticalGroup(
            WhiteBandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WhiteBandLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(WhiteBandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(WhiteBandLayout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(WhiteBandLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jLabel1)
                        .addGroup(WhiteBandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(WhiteBandLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, WhiteBandLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblHelp)
                                .addGap(26, 26, 26))))))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(WhiteBand, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addComponent(WhiteBand, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 730, 240));

        jPanel3.setBackground(new java.awt.Color(255, 204, 0));
        jPanel3.setForeground(new java.awt.Color(255, 204, 0));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 650, 731, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnActionPerformed
        // TODO add your handling code here:
        //dispaly login form
        LoginPage log = new LoginPage();
        log.setVisible(true);
        //close current screen
        this.dispose();
    }//GEN-LAST:event_btnReturnActionPerformed

    private void lblHelpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblHelpMouseClicked
        // TODO add your handling code here:
        //display help screen
        Help h = new Help();
        h.setVisible(true);
    }//GEN-LAST:event_lblHelpMouseClicked

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // TODO add your handling code here:
        
        //Colours and borders to be used for indication of correct and incorrect information entry
        Color r = new Color(156, 0, 0);
        Color g = new Color(15, 166, 7);
        
        Border a = BorderFactory.createMatteBorder(1, 1, 3, 1, g);
        Border b = BorderFactory.createMatteBorder(1, 1, 3, 1, r);
        
        //Confimation message displayed to user asking if they want to create a new account
        int opt = JOptionPane.showConfirmDialog(null, "You are about to Create a New Account. Do you wish to continue?", "Create", JOptionPane.YES_NO_OPTION);
        //if user clicks 'yes'
        if(opt == 0)
        {
            //First Name Validation Checks
            //Presence Check
            //If field is empty
            if(txtFName.getText().isEmpty())
            {
                //error message displayed in first name field is empty
                lblFNerr.setText("First Name must be entered*");
                //set labels and fields to red indicating error
                lblFNerr.setForeground(r);
                txtFName.setBorder(b);
                txtFName.setForeground(r);
            }
            else
            {
                //Ensures that first letter is a capital
                //if first letter is not capital letter
                if(!Character.isUpperCase(txtFName.getText().charAt(0)))
                {
                    //error message displayed if first letter is not a capital letter
                    lblFNerr.setText("First letter must be capitalized*");
                    //set label and field to red indicating error
                    lblFNerr.setForeground(r);
                    txtFName.setBorder(b);
                    txtFName.setForeground(r);
                }
                //if first letter is in uppercase
                else
                {
                    //analyse each character to check if it is a letter
                    for(int i = 0; i < txtFName.getText().length(); i++)
                    {
                        //Type and Logical check. Only letters should be used
                        //if letter at certain position is letter
                        if(Character.isLetter(txtFName.getText().charAt(i)))
                        {
                            //Length check
                            //if input gerater than 50 characters
                            if(txtFName.getText().length() > 50)
                            {
                                //error message to be displayed if first name greater than 50 characters
                                lblFNerr.setText("Ensure input has less than 50 characters*");
                                //set label and field to red indicating error
                                lblFNerr.setForeground(r);
                                txtFName.setBorder(b);
                                txtFName.setForeground(r);
                            }
                            //if input less than 3 characters
                            else if(txtFName.getText().length() < 3)
                            {
                                //error message to be displayed if first name less than 3 characters
                                lblFNerr.setText("Ensure input has more than 3 characters*");
                                //set label and field to red indicating error
                                lblFNerr.setForeground(r);
                                txtFName.setBorder(b);
                                txtFName.setForeground(r);
                            }
                            //if there are no errors
                            else
                            {
                                //Display stars indicating correct input
                                lblFNerr.setText("****");
                                //set label and field to indicate correct input
                                lblFNerr.setForeground(g);
                                txtFName.setBorder(a);
                                txtFName.setForeground(g);
                            }
                        }
                        //if charactr other than letters are found
                        else
                        {
                            //error message displayed if there are characters other than letters in input
                            lblFNerr.setText("Enter only letters*");
                            //set label and field to red indicating error
                            lblFNerr.setForeground(r);
                            txtFName.setBorder(b);
                            txtFName.setForeground(r);
                        }
                    }
                }
            }

            //Last Name Validation Checks
            //Presence Check 
            //if field is empty
            if(txtLName.getText().isEmpty())
            {
                //error message to be displayed if last name field is empty
                lblLNerr.setText("Last Name must be entered*");
                //set label and field to red to indicate error
                lblLNerr.setForeground(r);
                txtLName.setBorder(b);
                txtLName.setForeground(r);
            }
            //if field is not empty
            else
            {
                //Ensures that first letter is a capital
                //if first letter of input is not in uppercase
                if(!Character.isUpperCase(txtLName.getText().charAt(0)))
                {
                    //error message to be displayed if first letter of input is lower case
                    lblLNerr.setText("First letter must be capitalized*");
                    //set label and field to red to indicate error
                    lblLNerr.setForeground(r);
                    txtLName.setBorder(b);
                    txtLName.setForeground(r);
                }
                //if first letter of input is in upper case
                else
                {
                    //analyse each letter of input
                    for(int i = 0; i < txtLName.getText().length(); i++)
                    {
                        //Type and Logical check. Only letters should be used
                        //if letter at i is a letter
                        if(Character.isLetter(txtLName.getText().charAt(i)))
                        {
                            //Length check
                            //if input is greater than 50 characters
                            if(txtLName.getText().length() > 50)
                            {
                                //error message to be displayed if input greater than 50 characters
                                lblLNerr.setText("Ensure input has less than 50 characters*");
                                //set label and field to red to indicate error
                                lblLNerr.setForeground(r);
                                txtLName.setBorder(b);
                                txtLName.setForeground(r);
                            }
                            //if input is less than 3 characters
                            else if(txtLName.getText().length() < 3)
                            {
                                //error message to be displayed if input is less than 3 characters
                                lblLNerr.setText("Ensure input has more than 3 characters*");
                                //set label and field to red to indicate error
                                lblLNerr.setForeground(r);
                                txtLName.setBorder(b);
                                txtLName.setForeground(r);
                            }
                            //if none of the above errors are found
                            else
                            {
                                //display stars indicating correct input
                                lblLNerr.setText("****");
                                //set label and field to green to indicate correct input
                                lblLNerr.setForeground(g);
                                txtLName.setBorder(a);
                                txtLName.setForeground(g);
                            }
                        }
                        //if chaaracter at i is not a letter
                        else
                        {
                            //error message to be displayed if character(s) not letters
                            lblLNerr.setText("Enter only letters*");
                            //set label and field to red to indicate error
                            lblLNerr.setForeground(r);
                            txtLName.setBorder(b);
                            txtLName.setForeground(r);
                        }
                    }
                }
            }

            //Position Validation Checks
            //Presence Check
            //if position has not been selected
            if((cmbPos.getSelectedItem().toString()).equals("Position"))
            {
                //error message to be displayed if position has not been selecetd
                lblPOSerr.setText("Position must be selected*");
                //set label red to indicate error
                lblPOSerr.setForeground(r);
            }
            //if position has been selected
            else
            {
                //display green stars to indicate correct input
                lblPOSerr.setText("****");
                //set label to green to indicate correct input
                lblPOSerr.setForeground(g);
            }

            //Gender Validation Checks
            //Presence Check
            //if neither of the check boxes have been selected
            if(!cbMale.isSelected() && !cbFemale.isSelected())
            {
                //error message to be displayed if both check boxes have not been selected
                lblGENerr.setText("Gender must be selected*");
                //set label and fields to red to indicate error
                lblGENerr.setForeground(r);
                cbMale.setForeground(r);
                cbFemale.setForeground(r);
            }
            //if both of the check boxes have been selected
            else if(cbMale.isSelected() && cbFemale.isSelected())
            {
                //error messgae to be displayed if both check boxes have been selected
                lblGENerr.setText("You may only select one option*");
                //set label and fields to red to indicate error
                lblGENerr.setForeground(r);
                cbMale.setForeground(r);
                cbFemale.setForeground(r);
            }
            //if only one of the two has been selected
            else
            {
                //display stars to indicate correct input
                lblGENerr.setText("****");
                //set label and fields to green to indicate correct input
                lblGENerr.setForeground(g);
                cbMale.setForeground(g);
                cbFemale.setForeground(g);
            }

            //Date of Birth Validation Checks
            //Presence Check
            //if date of birth has not been entered
            if(jdcDOB.getDate() == null)
            {
                //error message to be displayed if field has been left empty
                lblDOBerr.setText("Date of Birth must be entered*");
                //set label to red to indicate error
                lblDOBerr.setForeground(r);
            }
            //if the field is not empty
            else
            {
                //Year Logic Checks
                //initialise a birthday variable
                LocalDate birthday = jdcDOB.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                //initialise a current date variable
                LocalDate currentDate = LocalDate.now();

                //Logic Check
                //if birthday is after current date
                if(birthday.isAfter(currentDate))
                {
                    //message to be displayed if date of birth is in the future
                    lblDOBerr.setText("Date of birth cannot be in the future*");
                    //set label to red to indicate error
                    lblDOBerr.setForeground(r);
                }
                //if date of birth is before current date
                else
                {
                    //initialise age variable
                    Period age = Period.between(birthday, currentDate);

                    //Range Check
                    //if age less than 17 years
                    if(age.getYears() < 17)
                    {
                        //message to be displayed if age less than 17 years
                        lblDOBerr.setText("Date of Birth out of range*");
                        //set label to red to indicate error
                        lblDOBerr.setForeground(r);
                    }
                    //if age is greater than 70 years
                    else if(age.getYears() > 70)
                    {
                        //message to be displayed if age greater than 70 years
                        lblDOBerr.setText("Date of Birth out of range*");
                        //set label to red to indicate error
                        lblDOBerr.setForeground(r);
                    }
                    //if no errors are present
                    else
                    {
                        //display stars to indicate correct input
                        lblDOBerr.setText("****");
                        //set label to green to indicate correct input
                        lblDOBerr.setForeground(g);
                    }
                }
            }
            
            //Username Checks
            //Presence Check
            //if username field is empty
            if(txtUN.getText().isEmpty())
            {
                //message to be dispalyed if username field is empty
                lblUNerr.setText("Username must be entered*");
                //set label and field to red to indicate error
                lblUNerr.setForeground(r);
                txtUN.setBorder(b);
                txtUN.setForeground(r);
            }
            //if field is not empty
            else
            {      
                //Length check
                //if input is greater than 50 characters
                if(txtUN.getText().length() > 50)
                {
                    //message to be displayed if input is greater than 50 characters
                    lblUNerr.setText("Ensure Username has less than 50 characters*");
                    //set label and field to red to indicate error
                    lblUNerr.setForeground(r);
                    txtUN.setBorder(b);
                    txtUN.setForeground(r);
                }
                //if input is less than 5 characters
                else if(txtUN.getText().length() < 5)
                {
                    //message to be displayed if input is less than 5 characters
                    lblUNerr.setText("Ensure Username has more than 5 characters*");
                    //set label and field to red to indicate error
                    lblUNerr.setForeground(r);
                    txtUN.setBorder(b);
                    txtUN.setForeground(r);
                }
                //if not errors are present
                else
                {
                    //begin try-catch
                    try
                    {
                        String query = "SELECT * FROM accountdetails WHERE `Username` = '" + txtUN.getText() + "';";
                        //get connection to database
                        con = DriverManager.getConnection("jdbc:mysql://localhost/consultations", "root", "");
                        pst = con.prepareStatement(query);
                        //retrieve all data from database
                        ResultSet rs = pst.executeQuery(query);

                        //if username already in database
                        if(rs.next())
                        {
                            //message to be displayed if username already in database
                            lblUNerr.setText("Username already exists*");
                            //set label and field to red to indicate error
                            lblUNerr.setForeground(r);
                            txtUN.setBorder(b);
                            txtUN.setForeground(r);
                        }
                        //if username not in database
                        else
                        {
                            //display stars to indicate appropriate input
                            lblUNerr.setText("****");
                            //set label and field to green to indicate appropriate input
                            lblUNerr.setForeground(g);
                            txtUN.setBorder(a);
                            txtUN.setForeground(g);
                        }
                    }
                    catch(SQLException ex)
                    {
                        JOptionPane.showMessageDialog(null, ex, "Error", JOptionPane.ERROR_MESSAGE);
                    }
                    //end of try-catch
                }
            }
            
            //Password Checks
            //Presence Check
            //if password field is empty
            if(pfPass.getText().isEmpty())
            {
                //message to be displayed if password field is empty
                lblPWDerr.setText("Password must be entered*");
                //set label and field to red to indicate error
                lblPWDerr.setForeground(r);
                pfPass.setBorder(b);
                pfPass.setForeground(r);
            }
            //if password field is not empty
            else
            {       
                //Length check
                //if input is greater than 50 characters
                if(pfPass.getText().length() > 50)
                {
                    //message to be displayed if input is greater than 50 characters
                    lblPWDerr.setText("Ensure Password has less than 50 characters*");
                    //set label and field to red to indicate error
                    lblLNerr.setForeground(r);
                    pfPass.setBorder(b);
                    pfPass.setForeground(r);
                }
                //if input is less than 7 characters
                else if(pfPass.getText().length() < 7)
                {
                    //message to be displayed if input is less than 7 characters
                    lblPWDerr.setText("Ensure Password has more than 7 characters*");
                    //set label and field to red to indicate error
                    lblPWDerr.setForeground(r);
                    pfPass.setBorder(b);
                    pfPass.setForeground(r);
                }
                //if no errors are present
                else
                {
                    //display stars to indicate appropriate input
                    lblPWDerr.setText("****");
                    //set label and field to green to indicate appropriate input
                    lblPWDerr.setForeground(g);
                    pfPass.setBorder(a);
                    pfPass.setForeground(g);
                }
            }

            //If all data is valid
            if(lblUNerr.getText().equals("****") && lblFNerr.getText().equals("****") && lblLNerr.getText().equals("****") && lblPWDerr.getText().equals("****") && lblGENerr.getText().equals("****") && lblDOBerr.getText().equals("****") && lblPOSerr.getText().equals("****"))
            {
                //Insert into databases
                //begin try-catch
                try
                {
                    //get connection to database
                    con = DriverManager.getConnection("jdbc:mysql://localhost/consultations", "root", "");
                    
                    //prompt user to enter new security question and answer
                    String s = JOptionPane.showInputDialog(null, "Enter new Security Question");
                    String ss = JOptionPane.showInputDialog(null, "Enter new Answer");

                    String query2 = "INSERT INTO security (`Username`, `Question`, `Answer`) VALUES(?, ?, ?)";
                    ps = con.prepareStatement(query2);
                    
                    //insert question, answer and username into 'Security' table
                    ps.setString(1, txtUN.getText());
                    ps.setString(2, s);
                    ps.setString(3, ss);
                    
                    //update the database
                    ps.executeUpdate();
                    
                    String query = "INSERT INTO `accountdetails`(`Username`, `Password`, `Firstname`, `Lastname`, `Gender`, `DateOfBirth`, `Position`) VALUES (?, ?, ?, ?, ?, ?, ?)";
                    pst = con.prepareStatement(query);
                    //insert user details into the table 'accountdetails'
                    pst.setString(1, txtUN.getText());
                    pst.setString(2, pfPass.getText());
                    pst.setString(3, txtFName.getText());
                    pst.setString(4, txtLName.getText());
                    if(cbMale.isSelected())
                    {
                        gender = "Male";
                    }
                    else if(cbFemale.isSelected())
                    {
                        gender = "Female";
                    }
                    pst.setString(5, gender);
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                    pst.setString(6, sdf.format(jdcDOB.getDate()));
                    pst.setString(7, cmbPos.getSelectedItem().toString());
                    pst.executeUpdate();
                    //close connection to database
                    con.close();
                    //display message indicating successful creation of account 
                    JOptionPane.showMessageDialog(null, "New Account Created Successfully");
                    //set login page to be visible
                    LoginPage log = new LoginPage();
                    log.setVisible(true);
                    //remove current page from view
                    this.dispose();
                }
                catch(HeadlessException | SQLException ex)
                {
                    JOptionPane.showMessageDialog(null, ex, "Error", JOptionPane.ERROR_MESSAGE);
                }
                //end of try-catch
            }
            else
            {
                //Message to be displayed if not all data is valid
                JOptionPane.showMessageDialog(null, "Check that all fields input correctly", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        //if user clicks no
        else
        {
            //message to be displayed if user clicks no
            JOptionPane.showMessageDialog(null, "Craete account action aborted");
        }
    }//GEN-LAST:event_btnCreateActionPerformed

    private void txtUNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUNActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUNActionPerformed

    private void pfPassKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pfPassKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_pfPassKeyTyped

    private void lblEyeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblEyeMouseClicked
        // TODO add your handling code here:
        //images for password eye
        ImageIcon open = new ImageIcon("open.png");
        ImageIcon closed = new ImageIcon("closed.png");
        
        if(lblEye.getIcon().toString().endsWith("closed.png"))
        {
            lblEye.setIcon(open);
            pfPass.setEchoChar((char)0);
        }
        else
        {
            lblEye.setIcon(closed);
            pfPass.setEchoChar('*');
        }
    }//GEN-LAST:event_lblEyeMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewAccount.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new NewAccount().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel WhiteBand;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnReturn;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox cbFemale;
    private javax.swing.JCheckBox cbMale;
    private javax.swing.JComboBox<String> cmbPos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private com.toedter.calendar.JDateChooser jdcDOB;
    private javax.swing.JLabel lblDOB;
    private javax.swing.JLabel lblDOBerr;
    private javax.swing.JLabel lblEye;
    private javax.swing.JLabel lblFName;
    private javax.swing.JLabel lblFNerr;
    private javax.swing.JLabel lblGENerr;
    private javax.swing.JLabel lblGender;
    private javax.swing.JLabel lblHelp;
    private javax.swing.JLabel lblLName;
    private javax.swing.JLabel lblLNerr;
    private javax.swing.JLabel lblPOSerr;
    private javax.swing.JLabel lblPWDerr;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblPosition;
    private javax.swing.JLabel lblUNerr;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JPasswordField pfPass;
    private javax.swing.JTextField txtFName;
    private javax.swing.JTextField txtLName;
    private javax.swing.JTextField txtUN;
    // End of variables declaration//GEN-END:variables
}
